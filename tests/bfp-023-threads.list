ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page     1

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                             2 ***********************************************************************
                                                                             3 *
                                                                             4 *Testcase ieee.c/Softfloat 3a thread safety.
                                                                             5 *  This test case dispatches floating point work on four CPUs.  Any
                                                                             6 *  variation from expected results, as detected by each CPU, shows a
                                                                             7 *  lack of thread safety.
                                                                             8 *
                                                                             9 *  Each CPU is given a single floating point operation to be performed
                                                                            10 *  in a loop.  Each CPU has a different operation to perform, with a
                                                                            11 *  different expected result and IEEE flag set from Softfloat.
                                                                            12 *
                                                                            13 ***********************************************************************


                                                                            15 ***********************************************************************
                                                                            16 *
                                                                            17 *Function/Operation
                                                                            18 * - Test Case Processing
                                                                            19 *   1) The first CPU is started by the runtest restart command.  The
                                                                            20 *      first CPU:
                                                                            21 *      a) starts the second CPU using SIGP.
                                                                            22 *      b) repeats the assigned floating point operation, looking for
                                                                            23 *         evidence of pre-emptive multitasking and incorrect results.
                                                                            24 *      c) At the end of a set number of calculations, the other three
                                                                            25 *         processors are stopped via SIGP.
                                                                            26 *      d) A hardwait PSW is loaded
                                                                            27 *   2) The second CPU is started by the SIGP restart from the first
                                                                            28 *      CPU.  The second CPU:
                                                                            29 *      a) starts the third CPU using SIGP.
                                                                            30 *      b) repeats the assigned floating point operation, looking for
                                                                            31 *         evidence of pre-emptive multitasking and incorrect results.
                                                                            32 *      c) The floating point operation is repeated until the CPU is
                                                                            33 *         stopped by the first CPU.
                                                                            34 *   3) The third CPU is started by the second, and starts the fourth.
                                                                            35 *      Otherwise, it operates in the same way that CPU two does.
                                                                            36 *   4) The fourth CPU is started by the second.  It does not start
                                                                            37 *      another CPU.  Otherwise, it operates in the same way that CPUs
                                                                            38 *    two and three do.
                                                                            39 *
                                                                            40 *Entry Points
                                                                            41 * - All entries are via the PSW stored in the restart PSW field
                                                                            42 * - CPUnBEG, where n is replaced by 0, 1, 2, or 3.  Each is the start
                                                                            43 *   of the CPU-specific code for that CPU.
                                                                            44 *
                                                                            45 *Input
                                                                            46 * - Floating point operands and expected results are compiled into
                                                                            47 *   the program.
                                                                            48 *
                                                                            49 *Output
                                                                            50 * - All outputs are stored starting at real memory location X'E00'
                                                                            51 * - Count of trials performed by each CPU.
                                                                            52 * - Count of thread pre-emptions (switches) detected by each CPU.
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page     2

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                            53 *   Note that not all pre-emptions are detected.
                                                                            54 * - Count of trials that returned incorrect results by CPU.
                                                                            55 * - Count of trials that returned incorrect FPCR contents by CPU.
                                                                            56 * - For each CPU, the last incorrect result and the last incorrect
                                                                            57 *   FPCR contents.  Note that the incorrect result and the incorrect
                                                                            58 *   FPCR contents may be from different trials.
                                                                            59 *
                                                                            60 *External Dependencies
                                                                            61 * - This program is intended to be run on Hercules as part of the
                                                                            62 *   'runtest' facility.
                                                                            63 *
                                                                            64 *Exit
                                                                            65 * Normal- via LPSWE of a disabled wait PSW, address zero
                                                                            66 * Abnormal- via LPSWE of a disabled wait PSW, address X'DEAD'
                                                                            67 *
                                                                            68 *Attributes
                                                                            69 * - None
                                                                            70 *
                                                                            71 *Notes
                                                                            72 * - Prefixing is not used by this program.  All four processors use
                                                                            73 *   the same low core locations.  This means that traps (program
                                                                            74 *   checks) are not supported.  Any changes to this program to test
                                                                            75 *   trappable instruction results means prefixing must be used.
                                                                            76 * - Any program check results in load of a disabled wait PSW.
                                                                            77 *
                                                                            78 *
                                                                            79 ***********************************************************************


                                                                            81          MACRO
                                                                            82          PADCSECT &ENDLABL
                                                                            83 .*
                                                                            84 .*  Macro to pad the CSECT to include result data areas if this test
                                                                            85 .*  program is not being assembled using asma.  asma generates a core
                                                                            86 .*  image that is loaded by the loadcore command, and because the
                                                                            87 .*  core image is a binary stored in Github, it makes sense to make
                                                                            88 .*  this small effort to keep the core image small.
                                                                            89 .*
                                                                            90          AIF   (D'&ENDLABL).GOODPAD
                                                                            91          MNOTE 4,'Missing or invalid CSECT padding label ''&ENDLABL'''
                                                                            92          MNOTE *,'No CSECT padding performed'
                                                                            93          MEXIT
                                                                            94 .*
                                                                            95 .GOODPAD ANOP            Label valid.  See if we're on asma
                                                                            96          AIF   ('&SYSASM' EQ 'A SMALL MAINFRAME ASSEMBLER').NOPAD
                                                                            97          ORG   &ENDLABL-1   Not ASMA.  Pad CSECT
                                                                            98          MEXIT
                                                                            99 .*
                                                                           100 .NOPAD   ANOP
                                                                           101          MNOTE *,'asma detected; no CSECT padding performed'
                                                                           102          MEND
                                                                           103 *
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page     3

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           104 *  Note: for compatibility with the z/CMS test rig, do not change
                                                                           105 *  or use R11, R14, or R15.  Everything else is fair game.
                                                                           106 *  Although this program's use of four processors likely precludes
                                                                           107 *  its validation in z/CMS.
                                                                           108 *
                                      0000000000000000  0000000000002081   109 BFPTHRED START 0
                                      0000000000000000  0000000000000001   110 STRTLABL EQU   *
                                      0000000000000000  0000000000000001   111 R0       EQU   0                   Work register for cc extraction
                                      0000000000000001  0000000000000001   112 R1       EQU   1
                                      0000000000000002  0000000000000001   113 R2       EQU   2                   Holds count of test input values
                                      0000000000000003  0000000000000001   114 R3       EQU   3                   Points to next test input value(s)
                                      0000000000000004  0000000000000001   115 R4       EQU   4                   Rounding tests inner loop control
                                      0000000000000005  0000000000000001   116 R5       EQU   5                   Rounding tests outer loop control
                                      0000000000000006  0000000000000001   117 R6       EQU   6                   Rounding tests top of inner loop
                                      0000000000000007  0000000000000001   118 R7       EQU   7                   Pointer to next result value(s)
                                      0000000000000008  0000000000000001   119 R8       EQU   8                   Pointer to next FPCR result
                                      0000000000000009  0000000000000001   120 R9       EQU   9                   Rounding tests top of outer loop
                                      000000000000000A  0000000000000001   121 R10      EQU   10                  Pointer to test address list
                                      000000000000000B  0000000000000001   122 R11      EQU   11                  **Reserved for z/CMS test rig
                                      000000000000000C  0000000000000001   123 R12      EQU   12                  Holds number of test cases in set
                                      000000000000000D  0000000000000001   124 R13      EQU   13                  Mainline return address
                                      000000000000000E  0000000000000001   125 R14      EQU   14                  **Return address for z/CMS test rig
                                      000000000000000F  0000000000000001   126 R15      EQU   15                  **Base register on z/CMS or Hyperion
                                                                           127 *
                                                                           128 * Floating Point Register equates to keep the cross reference clean
                                                                           129 *
                                      0000000000000000  0000000000000001   130 FPR0     EQU   0
                                      0000000000000001  0000000000000001   131 FPR1     EQU   1
                                      0000000000000002  0000000000000001   132 FPR2     EQU   2
                                      0000000000000003  0000000000000001   133 FPR3     EQU   3
                                      0000000000000004  0000000000000001   134 FPR4     EQU   4
                                      0000000000000005  0000000000000001   135 FPR5     EQU   5
                                      0000000000000006  0000000000000001   136 FPR6     EQU   6
                                      0000000000000007  0000000000000001   137 FPR7     EQU   7
                                      0000000000000008  0000000000000001   138 FPR8     EQU   8
                                      0000000000000009  0000000000000001   139 FPR9     EQU   9
                                      000000000000000A  0000000000000001   140 FPR10    EQU   10
                                      000000000000000B  0000000000000001   141 FPR11    EQU   11
                                      000000000000000C  0000000000000001   142 FPR12    EQU   12
                                      000000000000000D  0000000000000001   143 FPR13    EQU   13
                                      000000000000000E  0000000000000001   144 FPR14    EQU   14
                                      000000000000000F  0000000000000001   145 FPR15    EQU   15
                                                                           146 *
                                      0000000000010000  0000000000000001   147 CPU1PRE  EQU   X'10000'        CPU 1 prefix area at 64K
                                      0000000000012000  0000000000000001   148 CPU2PRE  EQU   CPU1PRE+X'2000' CPU 2 prefix area at 64K + 8K
                                      0000000000014000  0000000000000001   149 CPU3PRE  EQU   CPU2PRE+X'2000' CPU 2 prefix area at 64K + 2 * 8K
                                                                           150 *
0000000000000000                      0000000000000000                     151          USING *,R15
                                                                           152 *
                                                                           153 * Above works on real iron (R15=0 after sysclear)
                                                                           154 * and in z/CMS (R15 points to start of load module)
                                                                           155 *
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page     4

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT



                                                                           157 ***********************************************************************
                                                                           158 *
                                                                           159 * Low core definitions, Restart PSW, and Program Check Routine.
                                                                           160 *
                                                                           161 ***********************************************************************


0000000000000000                      0000000000000000  000000000000008E   163          ORG   STRTLABL+X'8E'      Program check interrution code
000000000000008E  0000                                                     164 PCINTCD  DS    H
                                                                           165 *
                                      0000000000000150  0000000000000001   166 PCOLDPSW EQU   STRTLABL+X'150'     z/Arch Program check old PSW
                                                                           167 *
0000000000000090                      0000000000000090  00000000000001A0   168          ORG   STRTLABL+X'1A0'     z/Arch Restart PSW
00000000000001A0  00000001 80000000                                        169 RESTRPSW DC    X'0000000180000000',AD(CPU0BEG)  64-bit addr, 4k page
                                      00000000000001A8  0000000000000001   170 RPSWADR  EQU   RESTRPSW-STRTLABL+8 Displacement of restart psw address
                                                                           171 *
00000000000001B0                      00000000000001B0  00000000000001D0   172          ORG   STRTLABL+X'1D0'     z/Arch Program check new PSW
00000000000001D0  00000001 80000000                                        173          DC    X'0000000180000000',AD(PROGCHK)
                                                                           174 *
                                                                           175 ******** Following ORG overlays the PC new PSW with a hard wait.
                                                                           176 *
                                                                           177 **       ORG   STRTLABL+X'1D0'     z/Arch Program check new PSW
                                                                           178 **       DC    X'0002000000000000',XL6'00',X'DEAD' Abnormal end
                                                                           179 *
                                                                           180 * Program check routine.  If Data Exception, continue execution at
                                                                           181 * the instruction following the program check.  Otherwise, hard wait.
                                                                           182 * No need to collect data.  All interesting DXC stuff is captured
                                                                           183 * in the FPCR.
                                                                           184 *
00000000000001E0                      00000000000001E0  0000000000000200   185          ORG   STRTLABL+X'200'
0000000000000200                                                           186 PROGCHK  DS    0H             Program check occured...
0000000000000200  9507 F08F                             000000000000008F   187          CLI   PCINTCD+1,X'07'  Data Exception?
0000000000000204  A774 0004                             000000000000020C   188          JNE   PCNOTDTA       ..no, hardwait (not sure if R15 is ok)
0000000000000208  B2B2 F150                             0000000000000150   189          LPSWE PCOLDPSW       ..yes, resume program execution
000000000000020C                                                           190 PCNOTDTA DS    0H
000000000000020C  12EE                                                     191          LTR   R14,R14        Return address provided?
000000000000020E  077E                                                     192          BNZR  R14            Yes, return to z/CMS test rig.
0000000000000210  B2B2 F228                             0000000000000228   193          LPSWE HARDWAIT       Not data exception, enter disabled wait
                                                                           194 *
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page     5

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           196 ***********************************************************************
                                                                           197 *
                                                                           198 * Data areas global to all four processors and areas that are per-cpu.
                                                                           199 *
                                                                           200 * Per-CPU variables are prefixed with 'CPUn' where n is replaced with
                                                                           201 * the CPU number, starting with zero.
                                                                           202 *
                                                                           203 ***********************************************************************


                                                                           205 *
                                      0000000000000006  0000000000000001   206 SIGPREST EQU   6             SIGP order for CPU Restart
                                      0000000000000005  0000000000000001   207 SIGPSTOP EQU   5             SIGP order for CPU Stop
                                      000000000000000D  0000000000000001   208 SIGPPREF EQU   13            SIGP order for Set Prefix
                                                                           209 *
0000000000000218                                                           210          DS    0D            Ensure correct alignment for psw
0000000000000218  00020000 00000000                                        211 WAITPSW  DC    X'0002000000000000',AD(0)  Normal end - disabled wait
0000000000000228  00020000 00000000                                        212 HARDWAIT DC    X'0002000000000000',XL6'00',X'DEAD' Abnormal end
                                                                           213 *
0000000000000238  00000000                                                 214 CPU0CR0  DS    F             CR0, used to turn on AFP
000000000000023C  00000000                                                 215 CPU1CR0  DS    F             CR0, used to turn on AFP
0000000000000240  00000000                                                 216 CPU2CR0  DS    F             CR0, used to turn on AFP
0000000000000244  00000000                                                 217 CPU3CR0  DS    F             CR0, used to turn on AFP
                                                                           218 *
0000000000000248  0000                                                     219 CPU0ADR  DS    H             CPU addr returned from STAP, used by SIGP
000000000000024A  0000                                                     220 CPU1ADR  DS    H             CPU addr returned from STAP, used by SIGP
000000000000024C  0000                                                     221 CPU2ADR  DS    H             CPU addr returned from STAP, used by SIGP
000000000000024E  0000                                                     222 CPU3ADR  DS    H             CPU addr returned from STAP, used by SIGP
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page     6

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           224 ***********************************************************************
                                                                           225 *
                                                                           226 * CPU 0 program.  Start all processors, enable Advanced Floating
                                                                           227 * Point, repetitively perform a floating point operation, then stop
                                                                           228 * all three other processors and load a hard wait PSW.
                                                                           229 *
                                                                           230 ***********************************************************************


0000000000000250                                                           232 CPU0BEG  DS    0H            Start of processing for CPU zero
0000000000000250  B212 F248                             0000000000000248   233          STAP  CPU0ADR       Store CPU address of this processor
0000000000000254  4810 F248                             0000000000000248   234          LH    R1,CPU0ADR    Get CPU address
0000000000000258  4110 1001                             0000000000000001   235          LA    R1,1(,R1)     Update to next CPU address
000000000000025C  4010 F24A                             000000000000024A   236          STH   R1,CPU1ADR    Store next CPU address
0000000000000260  4110 1001                             0000000000000001   237          LA    R1,1(,R1)     Update to next CPU address
0000000000000264  4010 F24C                             000000000000024C   238          STH   R1,CPU2ADR    Store next CPU address
0000000000000268  4110 1001                             0000000000000001   239          LA    R1,1(,R1)     Update to next CPU address
000000000000026C  4010 F24E                             000000000000024E   240          STH   R1,CPU3ADR    Store next CPU address
                                                                           241 *
                                                                           242 * Set up prefixing for each of the three additional CPUs that will
                                                                           243 * perform floating point operations. Copy the first 8K to appropriate
                                                                           244 * locations for each of the CPUs, modify the restart PSW, and issue
                                                                           245 * SIGP Set Prefix for each of them.
                                                                           246 *
                                                                           247 * Because the entirety of this program fits in less than 8K, prefixing
                                                                           248 * is not difficult.
                                                                           249 *
                                                                           250 *                            Set Prefix and start CPU 1
0000000000000270  4820 F24A                             000000000000024A   251          LH    R2,CPU1ADR    Get next CPU addresss
0000000000000274  E310 F600 0004                        0000000000000600   252          LG    R1,=AD(CPU1PRE)   Get address of CPU1 Prefix area
000000000000027A  1700                                                     253          XR    R0,R0         Set address of real low core
000000000000027C  B254 0010                                                254          MVPG  R1,R0         Make a copy of low core
0000000000000280  AE12 000D                             000000000000000D   255          SIGP  R1,R2,SIGPPREF Set prefix area for CPU 1
0000000000000284  D207 11A8 F5F0      00000000000001A8  00000000000005F0   256          MVC   RPSWADR(8,R1),=AD(CPU1BEG)  Update restart PSW in prefix
000000000000028A  1711                                                     257          XR    R1,R1         Zero SIGP parameter register
000000000000028C  AE02 0006                             0000000000000006   258          SIGP  R0,R2,SIGPREST  Start next CPU using a Restart command
                                                                           259 *
                                                                           260 *                            Set Prefix and start CPU 2
0000000000000290  4820 F24C                             000000000000024C   261          LH    R2,CPU2ADR    Get next CPU addresss
0000000000000294  E310 F5E8 0004                        00000000000005E8   262          LG    R1,=AD(CPU2PRE)   Get address of CPU1 Prefix area
000000000000029A  1700                                                     263          XR    R0,R0         Set address of real low core
000000000000029C  B254 0010                                                264          MVPG  R1,R0         Make a copy of low core
00000000000002A0  AE12 000D                             000000000000000D   265          SIGP  R1,R2,SIGPPREF Set prefix area for CPU 2
00000000000002A4  D207 11A8 F5E0      00000000000001A8  00000000000005E0   266          MVC   RPSWADR(8,R1),=AD(CPU2BEG)  Update restart PSW in prefix
00000000000002AA  1711                                                     267          XR    R1,R1         Zero SIGP parameter register
00000000000002AC  AE02 0006                             0000000000000006   268          SIGP  R0,R2,SIGPREST  Start next CPU using a Restart command
                                                                           269 *
                                                                           270 *                            Set Prefix and start CPU 3
00000000000002B0  4820 F24E                             000000000000024E   271          LH    R2,CPU3ADR    Get next CPU addresss
00000000000002B4  E310 F608 0004                        0000000000000608   272          LG    R1,=AD(CPU3PRE)   Get address of CPU1 Prefix area
00000000000002BA  1700                                                     273          XR    R0,R0         Set address of real low core
00000000000002BC  B254 0010                                                274          MVPG  R1,R0         Make a copy of low core
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page     7

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

00000000000002C0  AE12 000D                             000000000000000D   275          SIGP  R1,R2,SIGPPREF Set prefix area for CPU 3
00000000000002C4  D207 11A8 F5F8      00000000000001A8  00000000000005F8   276          MVC   RPSWADR(8,R1),=AD(CPU3BEG)  Update restart PSW in prefix
00000000000002CA  1711                                                     277          XR    R1,R1         Zero SIGP parameter register
00000000000002CC  AE02 0006                             0000000000000006   278          SIGP  R0,R2,SIGPREST  Start next CPU using a Restart command
                                                                           279 *
00000000000002D0  B600 F238                             0000000000000238   280          STCTL R0,R0,CPU0CR0 Store CR0 to enable AFP
00000000000002D4  9604 F239                             0000000000000239   281          OI    CPU0CR0+1,X'04' Turn on AFP bit
00000000000002D8  B700 F238                             0000000000000238   282          LCTL  R0,R0,CPU0CR0 Reload updated CR0
                                                                           283 *
                                                                           284 * Initialize counter for loop control
                                                                           285 *
00000000000002DC  C0C0 0000 0E92                        0000000000002000   286          LARL  R12,RESAREA   Point to shared results area
00000000000002E2                      0000000000002000                     287          USING RESAREA,R12   Make results addressable
00000000000002E2  5820 F610                             0000000000000610   288          L     R2,=F'10000000' Run loop 10,000,000 times
00000000000002E6  1733                                                     289          XR    R3,R3         Zero count of loop iterations
00000000000002E8  1843                                                     290          LR    R4,R3         Zero count of detected pre-emptions
00000000000002EA  1853                                                     291          LR    R5,R3         Zero count of result errors
00000000000002EC  1863                                                     292          LR    R6,R3         Zero count of FPCR contents errors
00000000000002EE  0DD0                                                     293          BASR  R13,0         Set top of loop
                                                                           294 *
                                                                           295 * Top of loop.  Check for pre-emption, do floating point operation,
                                                                           296 * increment count of trips through loop.
                                                                           297 *
00000000000002F0  D501 C080 F248      0000000000002080  0000000000000248   298          CLC   LASTCPU,CPU0ADR  Has another CPU been dispatched
00000000000002F6  4780 F308                             0000000000000308   299          BE    CPU0CALC      ..not that we can detect...do calc.
00000000000002FA  D201 C080 F248      0000000000002080  0000000000000248   300          MVC   LASTCPU,CPU0ADR  Update last dispatched CPU
0000000000000300  4140 4001                             0000000000000001   301          LA    R4,1(,R4)     Increment count of pre-emption detections
0000000000000304  5040 C010                             0000000000002010   302          ST    R4,CPU0PDET   Store updated count
                                                                           303 *
0000000000000308                                                           304 CPU0CALC DS    0H            Perform floating point operation
0000000000000308  B29D F3BC                             00000000000003BC   305          LFPC  CPU0FPCR      Reset FPCR to non-trap, RNTE
000000000000030C  7820 F3C0                             00000000000003C0   306          LE    FPR2,CPU0OP1  Load operand one
0000000000000310  B357 0082                                                307          FIEBR FPR8,0,FPR2   Floating Point Integer
0000000000000314  7080 C040                             0000000000002040   308          STE   FPR8,CPU0ARES Store actual result
0000000000000318  B29C C044                             0000000000002044   309          STFPC CPU0AFPC      Store actual FPCR contents
                                                                           310 *
000000000000031C  D503 C040 F3C4      0000000000002040  00000000000003C4   311          CLC   CPU0ARES,CPU0ER1  Did we get expected results?
0000000000000322  4780 F334                             0000000000000334   312          BE    CPU0CF1C      ..Yes, go check FPCR contents
0000000000000326  4150 5001                             0000000000000001   313          LA    R5,1(,R5)     Increment result error count
000000000000032A  5050 C020                             0000000000002020   314          ST    R5,CPU0RECT   Store updated result error count
000000000000032E  D203 C060 C040      0000000000002060  0000000000002040   315          MVC   CPU0XRES,CPU0ARES  Save incorrect result
                                                                           316 *
0000000000000334                                                           317 CPU0CF1C DS    0H
0000000000000334  D503 C044 F3C8      0000000000002044  00000000000003C8   318          CLC   CPU0AFPC,CPU0EF1  Did we get expected results?
000000000000033A  4780 F34C                             000000000000034C   319          BE    CPU0OPNX      ..Yes, do next operation
000000000000033E  4160 6001                             0000000000000001   320          LA    R6,1(,R6)     Increment FPCR contents error count
0000000000000342  5060 C030                             0000000000002030   321          ST    R6,CPU0FECT   Store updated FPCR contents error count
0000000000000346  D203 C064 C044      0000000000002064  0000000000002044   322          MVC   CPU0XFPC,CPU0AFPC  Save incorrect result
                                                                           323 *
000000000000034C                                                           324 CPU0OPNX DS    0H            Do second floating point operation
000000000000034C  B29D F3BC                             00000000000003BC   325          LFPC  CPU0FPCR      Reset FPCR to non-trap, RNTE
0000000000000350  7820 F3CC                             00000000000003CC   326          LE    FPR2,CPU0OP2  Load operand one
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page     8

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

0000000000000354  B357 0082                                                327          FIEBR FPR8,0,FPR2   Floating Point Integer
0000000000000358  7080 C040                             0000000000002040   328          STE   FPR8,CPU0ARES Store actual result
000000000000035C  B29C C044                             0000000000002044   329          STFPC CPU0AFPC      Store actual FPCR contents
                                                                           330 *
0000000000000360  D503 C040 F3D0      0000000000002040  00000000000003D0   331          CLC   CPU0ARES,CPU0ER2  Did we get expected results?
0000000000000366  4780 F378                             0000000000000378   332          BE    CPU0CF2C      ..Yes, go check FPCR contents
000000000000036A  4150 5001                             0000000000000001   333          LA    R5,1(,R5)     Increment result error count
000000000000036E  5050 C020                             0000000000002020   334          ST    R5,CPU0RECT   Store updated result error count
0000000000000372  D203 C060 C040      0000000000002060  0000000000002040   335          MVC   CPU0XRES,CPU0ARES  Save incorrect result
                                                                           336 *
0000000000000378                                                           337 CPU0CF2C DS    0H
0000000000000378  D503 C044 F3D4      0000000000002044  00000000000003D4   338          CLC   CPU0AFPC,CPU0EF2  Did we get expected results?
000000000000037E  4780 F390                             0000000000000390   339          BE    CPU0OPDN      ..Yes, end of iteration
0000000000000382  4160 6001                             0000000000000001   340          LA    R6,1(,R6)     Increment FPCR contents error count
0000000000000386  5060 C030                             0000000000002030   341          ST    R6,CPU0FECT   Store updated FPCR contents error count
000000000000038A  D203 C064 C044      0000000000002064  0000000000002044   342          MVC   CPU0XFPC,CPU0AFPC  Save incorrect result
                                                                           343 *
0000000000000390                                                           344 CPU0OPDN DS    0H            FP op and result checks done
0000000000000390  4130 3001                             0000000000000001   345          LA    R3,1(,R3)     Increment loop iteration count
0000000000000394  5030 C000                             0000000000002000   346          ST    R3,CPU0CTR    Store updated loop iteration count
0000000000000398  062D                                                     347          BCTR  R2,R13        Perform next iteration
                                                                           348 *
                                                                           349 * Looping completed.   Stop other processors and load hardwait PSW.
                                                                           350 *
000000000000039A                                                           351          DROP  R12
000000000000039A  1711                                                     352          XR    R1,R1         Zero SIGP parameter register
                                                                           353 *
000000000000039C  4820 F24A                             000000000000024A   354          LH    R2,CPU1ADR    Get next CPU addresss
00000000000003A0  AE02 0005                             0000000000000005   355          SIGP  R0,R2,SIGPSTOP  Stop the CPU
                                                                           356 *
00000000000003A4  4820 F24C                             000000000000024C   357          LH    R2,CPU2ADR    Get next CPU addresss
00000000000003A8  AE02 0005                             0000000000000005   358          SIGP  R0,R2,SIGPSTOP  Stop the CPU
                                                                           359 *
00000000000003AC  4820 F24E                             000000000000024E   360          LH    R2,CPU3ADR    Get next CPU addresss
00000000000003B0  AE02 0005                             0000000000000005   361          SIGP  R0,R2,SIGPSTOP  Stop the CPU
                                                                           362 *
00000000000003B4  12EE                                                     363          LTR   R14,R14       Return address provided?
00000000000003B6  077E                                                     364          BNZR  R14           ..Yes, return to z/CMS test rig.
00000000000003B8  B2B2 F218                             0000000000000218   365          LPSWE WAITPSW       All done
                                                                           366 *
                                                                           367 * Load Floating Point Integer of 1.5, RNTE.  Expect 2.0 and inexact
                                                                           368 *
00000000000003BC  00000000                                                 369 CPU0FPCR DC    X'00000000'   FPCR, no traps, RNTE
                                                                           370 *
00000000000003C0  3FC00000                                                 371 CPU0OP1  DC    X'3FC00000'         +1.5
00000000000003C4  40000000                                                 372 CPU0ER1  DC    X'40000000'         Expected result 2.0
00000000000003C8  00080000                                                 373 CPU0EF1  DC    X'00080000'         Expected FPCR contents flag inexact
                                                                           374 *
00000000000003CC  3F800000                                                 375 CPU0OP2  DC    X'3F800000'         +1.0
00000000000003D0  3F800000                                                 376 CPU0ER2  DC    X'3F800000'         Expected 1.0
00000000000003D4  00000000                                                 377 CPU0EF2  DC    X'00000000'         Expected FPCR flag-free, RNTE
                                                                           378 *
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page     9

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           380 ***********************************************************************
                                                                           381 *
                                                                           382 * CPU 1 program.  Start the next processor, enable Advanced Floating
                                                                           383 * Point, and repetitively perform a floating point operation until
                                                                           384 * this processor is stopped by CPU 0.
                                                                           385 *
                                                                           386 ***********************************************************************


00000000000003D8                                                           388 CPU1BEG  DS    0H            Start of processing for CPU zero
                                                                           389 *
00000000000003D8  B600 F23C                             000000000000023C   390          STCTL R0,R0,CPU1CR0 Store CR0 to enable AFP
00000000000003DC  9604 F23D                             000000000000023D   391          OI    CPU1CR0+1,X'04' Turn on AFP bit
00000000000003E0  B700 F23C                             000000000000023C   392          LCTL  R0,R0,CPU1CR0 Reload updated CR0
                                                                           393 *
                                                                           394 * Perform repetitive operation in a loop
                                                                           395 *
00000000000003E4  C0C0 0000 0E0E                        0000000000002000   396          LARL  R12,RESAREA   Point to shared results area
00000000000003EA                      0000000000002000                     397          USING RESAREA,R12   Make results addressable
00000000000003EA  1733                                                     398          XR    R3,R3         Zero count of loop iterations
00000000000003EC  1843                                                     399          LR    R4,R3         Zero count of detected pre-emptions
00000000000003EE  1853                                                     400          LR    R5,R3         Zero count of result errors
00000000000003F0  1863                                                     401          LR    R6,R3         Zero count of FPCR contents errors
00000000000003F2  0DD0                                                     402          BASR  R13,0         Set top of loop
                                                                           403 *
                                                                           404 * Top of loop.  Check for pre-emption, do floating point operation,
                                                                           405 * increment count of trips through loop.
                                                                           406 *
00000000000003F4  D501 C080 F24A      0000000000002080  000000000000024A   407          CLC   LASTCPU,CPU1ADR  Has another CPU been dispatched
00000000000003FA  4780 F40C                             000000000000040C   408          BE    CPU1CALC      ..not that we can detect...do calc.
00000000000003FE  D201 C080 F24A      0000000000002080  000000000000024A   409          MVC   LASTCPU,CPU1ADR  Update last dispatched CPU
0000000000000404  4140 4001                             0000000000000001   410          LA    R4,1(,R4)     Increment count of pre-emption detections
0000000000000408  5040 C014                             0000000000002014   411          ST    R4,CPU1PDET   Store updated count
                                                                           412 *
000000000000040C                                                           413 CPU1CALC DS    0H            Perform floating point operation
000000000000040C  B29D F49E                             000000000000049E   414          LFPC  CPU1FPCR      Reset FPCR to non-trap, RM
0000000000000410  7820 F4A2                             00000000000004A2   415          LE    FPR2,CPU1OP1  Load operand one
0000000000000414  B357 0082                                                416          FIEBR FPR8,0,FPR2   Convert to Floating Point integer
0000000000000418  7080 C048                             0000000000002048   417          STE   FPR8,CPU1ARES Store actual result
000000000000041C  B29C C04C                             000000000000204C   418          STFPC CPU1AFPC      Store actual FPCR contents
                                                                           419 *
0000000000000420  D503 C048 F4A6      0000000000002048  00000000000004A6   420          CLC   CPU1ARES,CPU1ER1  Did we get expected results?
0000000000000426  4780 F438                             0000000000000438   421          BE    CPU1CF1C      ..Yes, go check FPCR contents
000000000000042A  4150 5001                             0000000000000001   422          LA    R5,1(,R5)     Increment result error count
000000000000042E  5050 C024                             0000000000002024   423          ST    R5,CPU1RECT   Store updated loop iteration count
0000000000000432  D203 C068 C048      0000000000002068  0000000000002048   424          MVC   CPU1XRES,CPU1ARES  Save incorrect result
                                                                           425 *
0000000000000438                                                           426 CPU1CF1C DS    0H
0000000000000438  D503 C04C F4AA      000000000000204C  00000000000004AA   427          CLC   CPU1AFPC,CPU1EF1  Did we get expected results?
000000000000043E  4780 F450                             0000000000000450   428          BE    CPU1OPNX      ..Yes, end of iteration
0000000000000442  4160 6001                             0000000000000001   429          LA    R6,1(,R6)     Increment FPCR contents error count
0000000000000446  5060 C034                             0000000000002034   430          ST    R6,CPU1FECT   Store updated loop iteration count
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page    10

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

000000000000044A  D203 C06C C04C      000000000000206C  000000000000204C   431          MVC   CPU1XFPC,CPU1AFPC  Save incorrect result
                                                                           432 *
0000000000000450                                                           433 CPU1OPNX DS    0H            FP op and result checks done
0000000000000450  B29D F49E                             000000000000049E   434          LFPC  CPU1FPCR      Reset FPCR to non-trap, RM
0000000000000454  7820 F4AE                             00000000000004AE   435          LE    FPR2,CPU1OP2  Load operand one
0000000000000458  B357 0082                                                436          FIEBR FPR8,0,FPR2   Convert to Floating Point integer
000000000000045C  7080 C048                             0000000000002048   437          STE   FPR8,CPU1ARES Store actual result
0000000000000460  B29C C04C                             000000000000204C   438          STFPC CPU1AFPC      Store actual FPCR contents
                                                                           439 *
0000000000000464  D503 C048 F4B2      0000000000002048  00000000000004B2   440          CLC   CPU1ARES,CPU1ER2  Did we get expected results?
000000000000046A  4780 F47C                             000000000000047C   441          BE    CPU1CF2C      ..Yes, go check FPCR contents
000000000000046E  4150 5001                             0000000000000001   442          LA    R5,1(,R5)     Increment result error count
0000000000000472  5050 C024                             0000000000002024   443          ST    R5,CPU1RECT   Store updated loop iteration count
0000000000000476  D203 C068 C048      0000000000002068  0000000000002048   444          MVC   CPU1XRES,CPU1ARES  Save incorrect result
                                                                           445 *
000000000000047C                                                           446 CPU1CF2C DS    0H
000000000000047C  D503 C04C F4B6      000000000000204C  00000000000004B6   447          CLC   CPU1AFPC,CPU1EF2  Did we get expected results?
0000000000000482  4780 F494                             0000000000000494   448          BE    CPU1OPDN      ..Yes, end of iteration
0000000000000486  4160 6001                             0000000000000001   449          LA    R6,1(,R6)     Increment FPCR contents error count
000000000000048A  5060 C034                             0000000000002034   450          ST    R6,CPU1FECT   Store updated loop iteration count
000000000000048E  D203 C06C C04C      000000000000206C  000000000000204C   451          MVC   CPU1XFPC,CPU1AFPC  Save incorrect result
                                                                           452 *
0000000000000494                                                           453 CPU1OPDN DS    0H            FP op and result checks done
0000000000000494  4130 3001                             0000000000000001   454          LA    R3,1(,R3)     Increment count of loop iterations
0000000000000498  5030 C004                             0000000000002004   455          ST    R3,CPU1CTR    Store updated loop iteration count
000000000000049C  07FD                                                     456          BR    R13           Perform next iteration until CPU stopped
                                                                           457 *
000000000000049E                                                           458          DROP  R12
                                                                           459 *
                                                                           460 * Load Floating Point Integer of 1.5, RZ.  Expect 1.0 and inexact
                                                                           461 *
000000000000049E  00000001                                                 462 CPU1FPCR DC    X'00000001'   FPCR, no traps, RZ
                                                                           463 *
00000000000004A2  3FC00000                                                 464 CPU1OP1  DC    X'3FC00000'         +1.5
00000000000004A6  3F800000                                                 465 CPU1ER1  DC    X'3F800000'         Expected 1.0
00000000000004AA  00080001                                                 466 CPU1EF1  DC    X'00080001'         Expected FPCR flag inexact, RM
                                                                           467 *
00000000000004AE  3F800000                                                 468 CPU1OP2  DC    X'3F800000'         +1.0
00000000000004B2  3F800000                                                 469 CPU1ER2  DC    X'3F800000'         Expected 1.0
00000000000004B6  00000001                                                 470 CPU1EF2  DC    X'00000001'         Expected FPCR flag-free, RM
                                                                           471 *
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page    11

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           473 ***********************************************************************
                                                                           474 *
                                                                           475 * CPU 2 program.  Start the next processor, enable Advanced Floating
                                                                           476 * Point, and repetitively perform a floating point operation until
                                                                           477 * this processor is stopped by CPU 0.
                                                                           478 *
                                                                           479 ***********************************************************************


00000000000004BA                                                           481 CPU2BEG  DS    0H            Start of processing for CPU zero
                                                                           482 *
00000000000004BA  B600 F240                             0000000000000240   483          STCTL R0,R0,CPU2CR0 Store CR0 to enable AFP
00000000000004BE  9604 F241                             0000000000000241   484          OI    CPU2CR0+1,X'04' Turn on AFP bit
00000000000004C2  B700 F240                             0000000000000240   485          LCTL  R0,R0,CPU2CR0 Reload updated CR0
                                                                           486 *
                                                                           487 * Perform repetitive operation in a loop
                                                                           488 *
00000000000004C6  C0C0 0000 0D9D                        0000000000002000   489          LARL  R12,RESAREA   Point to shared results area
00000000000004CC                      0000000000002000                     490          USING RESAREA,R12   Make results addressable
00000000000004CC  1733                                                     491          XR    R3,R3         Zero count of loop iterations
00000000000004CE  1843                                                     492          LR    R4,R3         Zero count of detected pre-emptions
00000000000004D0  1853                                                     493          LR    R5,R3         Zero count of result errors
00000000000004D2  1863                                                     494          LR    R6,R3         Zero count of FPCR contents errors
00000000000004D4  0DD0                                                     495          BASR  R13,0         Set top of loop
                                                                           496 *
                                                                           497 * Top of loop.  Check for pre-emption, do floating point operation,
                                                                           498 * increment count of trips through loop.
                                                                           499 *
00000000000004D6  D501 C080 F24C      0000000000002080  000000000000024C   500          CLC   LASTCPU,CPU2ADR  Has another CPU been dispatched
00000000000004DC  4780 F4EE                             00000000000004EE   501          BE    CPU2CALC      ..not that we can detect...do calc.
00000000000004E0  D201 C080 F24C      0000000000002080  000000000000024C   502          MVC   LASTCPU,CPU2ADR  Update last dispatched CPU
00000000000004E6  4140 4001                             0000000000000001   503          LA    R4,1(,R4)     Increment count of pre-emption detections
00000000000004EA  5040 C018                             0000000000002018   504          ST    R4,CPU2PDET   Store updated count
                                                                           505 *
00000000000004EE                                                           506 CPU2CALC DS    0H            Perform floating point operation
00000000000004EE  B29D F53C                             000000000000053C   507          LFPC  CPU2FPCR      Reset FPCR to non-trap, RM
00000000000004F2  7820 F540                             0000000000000540   508          LE    FPR2,CPU2OP1  Load operand one
00000000000004F6  B357 0082                                                509          FIEBR FPR8,0,FPR2   Convert to Floating Point integer
00000000000004FA  7080 C050                             0000000000002050   510          STE   FPR8,CPU2ARES Store actual result
00000000000004FE  B29C C054                             0000000000002054   511          STFPC CPU2AFPC      Store actual FPCR contents
                                                                           512 *
0000000000000502  D503 C050 F544      0000000000002050  0000000000000544   513          CLC   CPU2ARES,CPU2ERES  Did we get expected results?
0000000000000508  4780 F51A                             000000000000051A   514          BE    CPU2CFPC      ..Yes, go check FPCR contents
000000000000050C  4150 5001                             0000000000000001   515          LA    R5,1(,R5)     Increment result error count
0000000000000510  5050 C028                             0000000000002028   516          ST    R5,CPU2RECT   Store updated loop iteration count
0000000000000514  D203 C070 C050      0000000000002070  0000000000002050   517          MVC   CPU2XRES,CPU2ARES  Save incorrect result
                                                                           518 *
000000000000051A                                                           519 CPU2CFPC DS    0H
000000000000051A  D503 C054 F548      0000000000002054  0000000000000548   520          CLC   CPU2AFPC,CPU2EFPC  Did we get expected results?
0000000000000520  4780 F532                             0000000000000532   521          BE    CPU2OPDN      ..Yes, end of iteration
0000000000000524  4160 6001                             0000000000000001   522          LA    R6,1(,R6)     Increment FPCR contents error count
0000000000000528  5060 C038                             0000000000002038   523          ST    R6,CPU2FECT   Store updated loop iteration count
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page    12

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

000000000000052C  D203 C074 C054      0000000000002074  0000000000002054   524          MVC   CPU2XFPC,CPU2AFPC  Save incorrect result
                                                                           525 *
0000000000000532                                                           526 CPU2OPDN DS    0H            FP op and result checks done
0000000000000532  4130 3001                             0000000000000001   527          LA    R3,1(,R3)     Increment count of loop iterations
0000000000000536  5030 C008                             0000000000002008   528          ST    R3,CPU2CTR    Store updated loop iteration count
000000000000053A  07FD                                                     529          BR    R13           Perform next iteration until CPU stopped
                                                                           530 *
000000000000053C                                                           531          DROP  R12
                                                                           532 *
                                                                           533 * Load Floating Point Integer of 1.5, RP.  Expect 2.0 and inexact
                                                                           534 *
000000000000053C  00000002                                                 535 CPU2FPCR DC    X'00000002'   FPCR, no traps, RP
                                                                           536 *
0000000000000540  3FC00000                                                 537 CPU2OP1  DC    X'3FC00000'         +1.5
                                                                           538 *
0000000000000544  40000000                                                 539 CPU2ERES DC    X'40000000'         Expected 2.0
0000000000000548  00080002                                                 540 CPU2EFPC DC    X'00080002'         Expected FPCR flag inexact, RM
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page    13

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           542 ***********************************************************************
                                                                           543 *
                                                                           544 * CPU 3 program.  Start the next processor, enable Advanced Floating
                                                                           545 * Point, and repetitively perform a floating point operation until
                                                                           546 * this processor is stopped by CPU 0.
                                                                           547 *
                                                                           548 ***********************************************************************


000000000000054C                                                           550 CPU3BEG  DS    0H            Start of processing for CPU zero
                                                                           551 *
000000000000054C  B600 F244                             0000000000000244   552          STCTL R0,R0,CPU3CR0 Store CR0 to enable AFP
0000000000000550  9604 F245                             0000000000000245   553          OI    CPU3CR0+1,X'04' Turn on AFP bit
0000000000000554  B700 F244                             0000000000000244   554          LCTL  R0,R0,CPU3CR0 Reload updated CR0
                                                                           555 *
                                                                           556 * Perform repetitive operation in a loop
                                                                           557 *
0000000000000558  C0C0 0000 0D54                        0000000000002000   558          LARL  R12,RESAREA   Point to shared results area
000000000000055E                      0000000000002000                     559          USING RESAREA,R12   Make results addressable
000000000000055E  1733                                                     560          XR    R3,R3         Zero count of loop iterations
0000000000000560  1843                                                     561          LR    R4,R3         Zero count of detected pre-emptions
0000000000000562  1853                                                     562          LR    R5,R3         Zero count of result errors
0000000000000564  1863                                                     563          LR    R6,R3         Zero count of FPCR contents errors
0000000000000566  0DD0                                                     564          BASR  R13,0         Set top of loop
                                                                           565 *
                                                                           566 * Top of loop.  Check for pre-emption, do floating point operation,
                                                                           567 * increment count of trips through loop.
                                                                           568 *
0000000000000568  D501 C080 F24E      0000000000002080  000000000000024E   569          CLC   LASTCPU,CPU3ADR  Has another CPU been dispatched
000000000000056E  4780 F580                             0000000000000580   570          BE    CPU3CALC      ..not that we can detect...do calc.
0000000000000572  D201 C080 F24E      0000000000002080  000000000000024E   571          MVC   LASTCPU,CPU3ADR  Update last dispatched CPU
0000000000000578  4140 4001                             0000000000000001   572          LA    R4,1(,R4)     Increment count of pre-emption detections
000000000000057C  5040 C01C                             000000000000201C   573          ST    R4,CPU3PDET   Store updated count
                                                                           574 *
0000000000000580                                                           575 CPU3CALC DS    0H            Perform floating point operation
0000000000000580  B29D F5CE                             00000000000005CE   576          LFPC  CPU3FPCR      Reset FPCR to non-trap, RM
0000000000000584  7820 F5D2                             00000000000005D2   577          LE    FPR2,CPU3OP1  Load operand one
0000000000000588  B357 0082                                                578          FIEBR FPR8,0,FPR2   Convert to Floating Point integer
000000000000058C  7080 C058                             0000000000002058   579          STE   FPR8,CPU3ARES Store actual result
0000000000000590  B29C C05C                             000000000000205C   580          STFPC CPU3AFPC      Store actual FPCR contents
                                                                           581 *
0000000000000594  D503 C058 F5D6      0000000000002058  00000000000005D6   582          CLC   CPU3ARES,CPU3ERES  Did we get expected results?
000000000000059A  4780 F5AC                             00000000000005AC   583          BE    CPU3CFPC      ..Yes, go check FPCR contents
000000000000059E  4150 5001                             0000000000000001   584          LA    R5,1(,R5)     Increment result error count
00000000000005A2  5050 C02C                             000000000000202C   585          ST    R5,CPU3RECT   Store updated loop iteration count
00000000000005A6  D203 C078 C058      0000000000002078  0000000000002058   586          MVC   CPU3XRES,CPU3ARES  Save incorrect result
                                                                           587 *
00000000000005AC                                                           588 CPU3CFPC DS    0H
00000000000005AC  D503 C05C F5DA      000000000000205C  00000000000005DA   589          CLC   CPU3AFPC,CPU3EFPC  Did we get expected FPCR?
00000000000005B2  4780 F5C4                             00000000000005C4   590          BE    CPU3OPDN      ..Yes, end of iteration
00000000000005B6  4160 6001                             0000000000000001   591          LA    R6,1(,R6)     Increment FPCR contents error count
00000000000005BA  5060 C03C                             000000000000203C   592          ST    R6,CPU3FECT   Store updated loop iteration count
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page    14

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

00000000000005BE  D203 C07C C05C      000000000000207C  000000000000205C   593          MVC   CPU3XFPC,CPU3AFPC  Save incorrect result
                                                                           594 *
00000000000005C4                                                           595 CPU3OPDN DS    0H            FP op and result checks done
00000000000005C4  4130 3001                             0000000000000001   596          LA    R3,1(,R3)     Increment count of iterations
00000000000005C8  5030 C00C                             000000000000200C   597          ST    R3,CPU3CTR    Store updated loop iteration count
00000000000005CC  07FD                                                     598          BR    R13           Perform next iteration until CPU stopped
00000000000005CE                                                           599          DROP  R12
                                                                           600 *
                                                                           601 * Load Floating Point Integer of 1.0, RM.  Expect 1.0 and no flags
                                                                           602 *
00000000000005CE  00000003                                                 603 CPU3FPCR DC    X'00000003'   FPCR, no traps, RP
                                                                           604 *
00000000000005D2  3F800000                                                 605 CPU3OP1  DC    X'3F800000'         +1.0
                                                                           606 *
00000000000005D6  3F800000                                                 607 CPU3ERES DC    X'3F800000'         Expected 1.0
00000000000005DA  00000003                                                 608 CPU3EFPC DC    X'00000003'         Expected FPCR flag-free, RP



00000000000005E0                                                           610          LTORG
00000000000005E0  00000000 000004BA                                        611                =AD(CPU2BEG)
00000000000005E8  00000000 00012000                                        612                =AD(CPU2PRE)
00000000000005F0  00000000 000003D8                                        613                =AD(CPU1BEG)
00000000000005F8  00000000 0000054C                                        614                =AD(CPU3BEG)
0000000000000600  00000000 00010000                                        615                =AD(CPU1PRE)
0000000000000608  00000000 00014000                                        616                =AD(CPU3PRE)
0000000000000610  00989680                                                 617                =F'10000000'
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page    15

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           619 *
                                                                           620 * Locations for results.  Because all four threads use these
                                                                           621 * values, they must not be in the area affected by prefixing.
                                                                           622 *
0000000000000614                      0000000000000614  0000000000002000   623          ORG   STRTLABL+X'2000'  Shared tables.
0000000000002000                                                           624 RESAREA  DS    0D            Start of results area
                                                                           625 *
                                                                           626 *  Loop iteration counter for each CPU
                                                                           627 *
0000000000002000  00000000                                                 628 CPU0CTR  DC    F'0'
0000000000002004  00000000                                                 629 CPU1CTR  DC    F'0'
0000000000002008  00000000                                                 630 CPU2CTR  DC    F'0'
000000000000200C  00000000                                                 631 CPU3CTR  DC    F'0'
                                                                           632 *
                                                                           633 *  Pre-emption detection counter for each CPU
                                                                           634 *
0000000000002010  00000000                                                 635 CPU0PDET DC    F'0'
0000000000002014  00000000                                                 636 CPU1PDET DC    F'0'
0000000000002018  00000000                                                 637 CPU2PDET DC    F'0'
000000000000201C  00000000                                                 638 CPU3PDET DC    F'0'
                                                                           639 *
                                                                           640 *  Result error detection counter for each CPU
                                                                           641 *
0000000000002020  00000000                                                 642 CPU0RECT DC    F'0'
0000000000002024  00000000                                                 643 CPU1RECT DC    F'0'
0000000000002028  00000000                                                 644 CPU2RECT DC    F'0'
000000000000202C  00000000                                                 645 CPU3RECT DC    F'0'
                                                                           646 *
                                                                           647 *  FPCR contents error detection counter for each CPU
                                                                           648 *
0000000000002030  00000000                                                 649 CPU0FECT DC    F'0'
0000000000002034  00000000                                                 650 CPU1FECT DC    F'0'
0000000000002038  00000000                                                 651 CPU2FECT DC    F'0'
000000000000203C  00000000                                                 652 CPU3FECT DC    F'0'
                                                                           653 *
                                                                           654 * Actual Results
                                                                           655 *
0000000000002040  00000000                                                 656 CPU0ARES DC    X'00000000'         Actual results
0000000000002044  00000000                                                 657 CPU0AFPC DC    X'00000000'         Actual FPCR contents
                                                                           658 *
0000000000002048  00000000                                                 659 CPU1ARES DC    X'00000000'         Actual results
000000000000204C  00000000                                                 660 CPU1AFPC DC    X'00000000'         Actual FPCR contents
                                                                           661 *
0000000000002050  00000000                                                 662 CPU2ARES DC    X'00000000'         Actual results
0000000000002054  00000000                                                 663 CPU2AFPC DC    X'00000000'         Actual FPCR contents
                                                                           664 *
0000000000002058  00000000                                                 665 CPU3ARES DC    X'00000000'         Actual results
000000000000205C  00000000                                                 666 CPU3AFPC DC    X'00000000'         Actual FPCR contents
                                                                           667 *
                                                                           668 * Error Results
                                                                           669 *
0000000000002060  00000000                                                 670 CPU0XRES DC    X'00000000'         Last error results
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page    16

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

0000000000002064  00000000                                                 671 CPU0XFPC DC    X'00000000'         Last error FPCR contents
                                                                           672 *
0000000000002068  00000000                                                 673 CPU1XRES DC    X'00000000'         Last error results
000000000000206C  00000000                                                 674 CPU1XFPC DC    X'00000000'         Last error FPCR contents
                                                                           675 *
0000000000002070  00000000                                                 676 CPU2XRES DC    X'00000000'         Last error results
0000000000002074  00000000                                                 677 CPU2XFPC DC    X'00000000'         Last error FPCR contents
                                                                           678 *
0000000000002078  00000000                                                 679 CPU3XRES DC    X'00000000'         Last error results
000000000000207C  00000000                                                 680 CPU3XFPC DC    X'00000000'         Last error FPCR contents
                                                                           681 *
                                                                           682 * Following shared variable used for preemption detection.  Cannot be
                                                                           683 * in the prefixed area, lest each CPU have its own copy.
                                                                           684 *
0000000000002080  0000                                                     685 LASTCPU  DC    H'0'          Address of last detected dispatched CPU
                                                                           686 *
                                      0000000000002200  0000000000000001   687 ENDLABL  EQU   STRTLABL+X'2200'
                                                                           688          PADCSECT ENDLABL
                                                                           689+         MNOTE *,'asma detected; no CSECT padding performed'
0000000000002082                                                           690          END
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page    17

     SYMBOL        TYPE  VALUE   LENGTH  DEFN  REFERENCES

BFPTHRED            J    000000    8322   109
CPU0ADR             H    000248       2   219  233  234  298  300
CPU0AFPC            X    002044       4   657  309  318  322  329  338  342
CPU0ARES            X    002040       4   656  308  311  315  328  331  335
CPU0BEG             H    000250       2   232  169
CPU0CALC            H    000308       2   304  299
CPU0CF1C            H    000334       2   317  312
CPU0CF2C            H    000378       2   337  332
CPU0CR0             F    000238       4   214  280  281  282
CPU0CTR             F    002000       4   628  346
CPU0EF1             X    0003C8       4   373  318
CPU0EF2             X    0003D4       4   377  338
CPU0ER1             X    0003C4       4   372  311
CPU0ER2             X    0003D0       4   376  331
CPU0FECT            F    002030       4   649  321  341
CPU0FPCR            X    0003BC       4   369  305  325
CPU0OP1             X    0003C0       4   371  306
CPU0OP2             X    0003CC       4   375  326
CPU0OPDN            H    000390       2   344  339
CPU0OPNX            H    00034C       2   324  319
CPU0PDET            F    002010       4   635  302
CPU0RECT            F    002020       4   642  314  334
CPU0XFPC            X    002064       4   671  322  342
CPU0XRES            X    002060       4   670  315  335
CPU1ADR             H    00024A       2   220  236  251  354  407  409
CPU1AFPC            X    00204C       4   660  418  427  431  438  447  451
CPU1ARES            X    002048       4   659  417  420  424  437  440  444
CPU1BEG             H    0003D8       2   388  256
CPU1CALC            H    00040C       2   413  408
CPU1CF1C            H    000438       2   426  421
CPU1CF2C            H    00047C       2   446  441
CPU1CR0             F    00023C       4   215  390  391  392
CPU1CTR             F    002004       4   629  455
CPU1EF1             X    0004AA       4   466  427
CPU1EF2             X    0004B6       4   470  447
CPU1ER1             X    0004A6       4   465  420
CPU1ER2             X    0004B2       4   469  440
CPU1FECT            F    002034       4   650  430  450
CPU1FPCR            X    00049E       4   462  414  434
CPU1OP1             X    0004A2       4   464  415
CPU1OP2             X    0004AE       4   468  435
CPU1OPDN            H    000494       2   453  448
CPU1OPNX            H    000450       2   433  428
CPU1PDET            F    002014       4   636  411
CPU1PRE             U    010000       1   147  148  252
CPU1RECT            F    002024       4   643  423  443
CPU1XFPC            X    00206C       4   674  431  451
CPU1XRES            X    002068       4   673  424  444
CPU2ADR             H    00024C       2   221  238  261  357  500  502
CPU2AFPC            X    002054       4   663  511  520  524
CPU2ARES            X    002050       4   662  510  513  517
CPU2BEG             H    0004BA       2   481  266
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page    18

     SYMBOL        TYPE  VALUE   LENGTH  DEFN  REFERENCES

CPU2CALC            H    0004EE       2   506  501
CPU2CFPC            H    00051A       2   519  514
CPU2CR0             F    000240       4   216  483  484  485
CPU2CTR             F    002008       4   630  528
CPU2EFPC            X    000548       4   540  520
CPU2ERES            X    000544       4   539  513
CPU2FECT            F    002038       4   651  523
CPU2FPCR            X    00053C       4   535  507
CPU2OP1             X    000540       4   537  508
CPU2OPDN            H    000532       2   526  521
CPU2PDET            F    002018       4   637  504
CPU2PRE             U    012000       1   148  149  262
CPU2RECT            F    002028       4   644  516
CPU2XFPC            X    002074       4   677  524
CPU2XRES            X    002070       4   676  517
CPU3ADR             H    00024E       2   222  240  271  360  569  571
CPU3AFPC            X    00205C       4   666  580  589  593
CPU3ARES            X    002058       4   665  579  582  586
CPU3BEG             H    00054C       2   550  276
CPU3CALC            H    000580       2   575  570
CPU3CFPC            H    0005AC       2   588  583
CPU3CR0             F    000244       4   217  552  553  554
CPU3CTR             F    00200C       4   631  597
CPU3EFPC            X    0005DA       4   608  589
CPU3ERES            X    0005D6       4   607  582
CPU3FECT            F    00203C       4   652  592
CPU3FPCR            X    0005CE       4   603  576
CPU3OP1             X    0005D2       4   605  577
CPU3OPDN            H    0005C4       2   595  590
CPU3PDET            F    00201C       4   638  573
CPU3PRE             U    014000       1   149  272
CPU3RECT            F    00202C       4   645  585
CPU3XFPC            X    00207C       4   680  593
CPU3XRES            X    002078       4   679  586
ENDLABL             U    002200       1   687
FPR0                U    000000       1   130
FPR1                U    000001       1   131
FPR10               U    00000A       1   140
FPR11               U    00000B       1   141
FPR12               U    00000C       1   142
FPR13               U    00000D       1   143
FPR14               U    00000E       1   144
FPR15               U    00000F       1   145
FPR2                U    000002       1   132  306  307  326  327  415  416  435  436  508  509  577  578
FPR3                U    000003       1   133
FPR4                U    000004       1   134
FPR5                U    000005       1   135
FPR6                U    000006       1   136
FPR7                U    000007       1   137
FPR8                U    000008       1   138  307  308  327  328  416  417  436  437  509  510  578  579
FPR9                U    000009       1   139
HARDWAIT            X    000228       8   212  193
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page    19

     SYMBOL        TYPE  VALUE   LENGTH  DEFN  REFERENCES

IMAGE               1    000000    8322     0
LASTCPU             H    002080       2   685  298  300  407  409  500  502  569  571
PCINTCD             H    00008E       2   164  187
PCNOTDTA            H    00020C       2   190  188
PCOLDPSW            U    000150       1   166  189
PROGCHK             H    000200       2   186  173
R0                  U    000000       1   111  253  254  258  263  264  268  273  274  278  280  282  355  358  361  390  392  483
                                               485  552  554
R1                  U    000001       1   112  234  235  236  237  238  239  240  252  254  255  256  257  262  264  265  266  267
                                               272  274  275  276  277  352
R10                 U    00000A       1   121
R11                 U    00000B       1   122
R12                 U    00000C       1   123  286  287  351  396  397  458  489  490  531  558  559  599
R13                 U    00000D       1   124  293  347  402  456  495  529  564  598
R14                 U    00000E       1   125  191  192  363  364
R15                 U    00000F       1   126  151
R2                  U    000002       1   113  251  255  258  261  265  268  271  275  278  288  347  354  355  357  358  360  361
R3                  U    000003       1   114  289  290  291  292  345  346  398  399  400  401  454  455  491  492  493  494  527
                                               528  560  561  562  563  596  597
R4                  U    000004       1   115  290  301  302  399  410  411  492  503  504  561  572  573
R5                  U    000005       1   116  291  313  314  333  334  400  422  423  442  443  493  515  516  562  584  585
R6                  U    000006       1   117  292  320  321  340  341  401  429  430  449  450  494  522  523  563  591  592
R7                  U    000007       1   118
R8                  U    000008       1   119
R9                  U    000009       1   120
RESAREA             D    002000       8   624  286  287  396  397  489  490  558  559
RESTRPSW            X    0001A0       8   169  170
RPSWADR             U    0001A8       1   170  256  266  276
SIGPPREF            U    00000D       1   208  255  265  275
SIGPREST            U    000006       1   206  258  268  278
SIGPSTOP            U    000005       1   207  355  358  361
STRTLABL            U    000000       1   110  163  166  168  170  172  185  623  687
WAITPSW             X    000218       8   211  365
=AD(CPU1BEG)        A    0005F0       8   613  256
=AD(CPU1PRE)        A    000600       8   615  252
=AD(CPU2BEG)        A    0005E0       8   611  266
=AD(CPU2PRE)        A    0005E8       8   612  262
=AD(CPU3BEG)        A    0005F8       8   614  276
=AD(CPU3PRE)        A    000608       8   616  272
=F'10000000'        F    000610       4   617  288
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page    20

 MACRO     DEFN  REFERENCES

PADCSECT     82   688
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page    21

   DESC     SYMBOL   SIZE     POS        ADDR

Entry: 0

Image      IMAGE     8322  0000-2081  0000-2081
  Region             8322  0000-2081  0000-2081
    CSECT  BFPTHRED  8322  0000-2081  0000-2081
ASMA Ver. 0.2.0  bfp-023-threads.asm: Test IEEE/Softfloat 3a Thread Safety                          19 Oct 2016 10:24:16  Page    22

   STMT                               FILE NAME

1     C:\Users\srorso\Documents\GitHub\hyperion\tests\bfp-023-threads.asm


** NO ERRORS FOUND **

[689] MNOTE *,asma detected; no CSECT padding performed
