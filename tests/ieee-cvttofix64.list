ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page     1

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                             2 ***********************************************************************
                                                                             3 *
                                                                             4 *Testcase IEEE CONVERT TO FIXED 64
                                                                             5 *  Test case capability includes ieee exceptions trappable and
                                                                             6 *  otherwise.  Test result, FPCR flags, and DXC saved for all tests.
                                                                             7 *
                                                                             8 ***********************************************************************


                                                                            10 ***********************************************************************
                                                                            11 *
                                                                            12 * Tests the following three conversion instructions
                                                                            13 *   CONVERT FROM FIXED (short BFP to int-64, RRE)
                                                                            14 *   CONVERT FROM FIXED (long BFP to int-64, RRE)
                                                                            15 *   CONVERT FROM FIXED (extended BFP to int-64, RRE)
                                                                            16 *
                                                                            17 * Test data is compiled into this program.  The test script that runs
                                                                            18 * this program can provide alternative test data through Hercules R
                                                                            19 * commands.
                                                                            20 *
                                                                            21 * Test Case Order
                                                                            22 * 1) Short BFP to Int-64
                                                                            23 * 2) Short BFP to Int-64 with all rounding modes
                                                                            24 * 3) Long BFP Int-64
                                                                            25 * 3) Long BFP Int-64 with all rounding modes
                                                                            26 * 4) Extended BFP to Int-64
                                                                            27 * 4) Extended BFP to Int-64 with all rounding modes
                                                                            28 *
                                                                            29 * Provided test data is 1, 2, 4, -2, QNaN, SNaN, 2 147 483 648, -2 147 483 648.
                                                                            30 *   The last two values will trigger inexact exceptions when converted to
                                                                            31 *   int-64.  ****** Need to addd underflow test cases   **********
                                                                            32 * Provided test data for all rounding tests is taken from SA22-7832-10 table 9-11
                                                                            33 *   on page 9-16.  While the table illustrates LOAD FP INTEGER, the same results
                                                                            34 *   should be generated when creating an int-64 or int-64 integer.
                                                                            35 *   -9.5, -5.5, -2.5, -1.5, -0.5, +0.5, +1.5, +2.5, +5.5, +9.5
                                                                            36 *
                                                                            37 *   Note that three input test data sets are provided, one each for short, long,
                                                                            38 *   and extended precision BFP.  All are converted to int-64.
                                                                            39 *
                                                                            40 * Also tests the following floating point support instructions
                                                                            41 *   LOAD  (Short)
                                                                            42 *   LOAD  (Long)
                                                                            43 *   SRNMB (Set BFP Rounding Mode 3-bit)
                                                                            44 *   STORE (Short)
                                                                            45 *   STORE (Long)
                                                                            46 *



                                      0000000000000000  0000000000000A27    48 BFPCVTTF START 0
                                      0000000000000000  0000000000000001    49 R0       EQU   0
                                      0000000000000001  0000000000000001    50 R1       EQU   1
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page     2

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                      0000000000000002  0000000000000001    51 R2       EQU   2
                                      0000000000000003  0000000000000001    52 R3       EQU   3
                                      0000000000000004  0000000000000001    53 R4       EQU   4
                                      0000000000000005  0000000000000001    54 R5       EQU   5
                                      0000000000000006  0000000000000001    55 R6       EQU   6
                                      0000000000000007  0000000000000001    56 R7       EQU   7
                                      0000000000000008  0000000000000001    57 R8       EQU   8
                                      0000000000000009  0000000000000001    58 R9       EQU   9
                                      000000000000000A  0000000000000001    59 R10      EQU   10
                                      000000000000000B  0000000000000001    60 R11      EQU   11
                                      000000000000000C  0000000000000001    61 R12      EQU   12
                                      000000000000000D  0000000000000001    62 R13      EQU   13
                                      000000000000000E  0000000000000001    63 R14      EQU   14
                                      000000000000000F  0000000000000001    64 R15      EQU   15
0000000000000000                      0000000000000000                      65          USING *,0
0000000000000000                      0000000000000000  000000000000008E    66          ORG   BFPCVTTF+X'8E'
000000000000008E  0000                                                      67 PCINTCD  DS    H                   Program check interrution code
                                      0000000000000150  0000000000000000    68 PCOLDPSW EQU   BFPCVTTF+X'150'     Program check old PSW
0000000000000090                      0000000000000090  00000000000001A0    69          ORG   BFPCVTTF+X'1A0'
00000000000001A0  00000001 80000000                                         70          DC    X'0000000180000000',AD(START)     z/Arch restart PSW
00000000000001B0                      00000000000001B0  00000000000001D0    71          ORG   BFPCVTTF+X'1D0'
00000000000001D0  00000000 00000000                                         72          DC    X'0000000000000000',AD(PROGCHK)   z/Arch pgm chk
00000000000001E0                      00000000000001E0  0000000000000200    73          ORG   BFPCVTTF+X'200'
                                                                            74 *
                                                                            75 * Program check routine.  If Data Exception, continue execution at
                                                                            76 * the instruction following the program check.  Otherwise, hard wait.
                                                                            77 *
0000000000000200                                                            78 PROGCHK  DS    0H             Program check occured...
0000000000000200  9507 008F                             000000000000008F    79          CLI   PCINTCD+1,X'07'  Data Exception?
0000000000000204  4770 020C                             000000000000020C    80          BNE   PCNOTDTA       ..no, hardwait
0000000000000208  B2B2 0150                             0000000000000150    81          LPSWE PCOLDPSW       ..yes, resume program execution
000000000000020C  B2B2 0260                             0000000000000260    82 PCNOTDTA LPSWE HARDWAIT       Not data exception, enter disabled wait.
                                                                            83 *
                                                                            84 *  Main program.  Enable Advanced Floating Point, process test cases.
                                                                            85 *
0000000000000210  B600 0270                             0000000000000270    86 START    STCTL R0,R0,CTLR0    Store CR0 to enable AFP
0000000000000214  9604 0271                             0000000000000271    87          OI    CTLR0+1,X'04'  Turn on AFP bit
0000000000000218  B700 0270                             0000000000000270    88          LCTL  R0,R0,CTLR0    Reload updated CR0
                                                                            89 *
                                                                            90 * Short BFP Input testing
                                                                            91 *
000000000000021C  41A0 0280                             0000000000000280    92          LA    R10,SHORTS     Point to short BFP test inputs
0000000000000220  4DD0 02E0                             00000000000002E0    93          BAS   R13,CGEBR      Convert values to fixed from short BFP
0000000000000224  41A0 02B0                             00000000000002B0    94          LA    R10,RMSHORTS   Point to inputs for rounding mode tests
0000000000000228  4DD0 0344                             0000000000000344    95          BAS   R13,CGEBRA     Convert using all rounding mode options
                                                                            96 *
                                                                            97 * Short BFP Input testing
                                                                            98 *
000000000000022C  41A0 0290                             0000000000000290    99          LA    R10,LONGS      Point to long BFP test inputs
0000000000000230  4DD0 04A2                             00000000000004A2   100          BAS   R13,CGDBR      Convert values to fixed from long BFP
0000000000000234  41A0 02C0                             00000000000002C0   101          LA    R10,RMLONGS    Point to inputs for rounding mode tests
0000000000000238  4DD0 0506                             0000000000000506   102          BAS   R13,CGDBRA     Convert using all rounding mode options
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page     3

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           103 *
                                                                           104 * Short BFP Input testing
                                                                           105 *
000000000000023C  41A0 02A0                             00000000000002A0   106          LA    R10,EXTDS      Point to extended BFP test inputs
0000000000000240  4DD0 0664                             0000000000000664   107          BAS   R13,CGXBR      Convert values to fixed from extended
0000000000000244  41A0 02D0                             00000000000002D0   108          LA    R10,RMEXTDS    Point to inputs for rounding mode tests
0000000000000248  4DD0 06CC                             00000000000006CC   109          BAS   R13,CGXBRA     Convert using all rounding mode options
                                                                           110 *
000000000000024C  B2B2 0250                             0000000000000250   111          LPSWE WAITPSW        All done
                                                                           112 *
0000000000000250                                                           113          DS    0D             Ensure correct alignment for psw
0000000000000250  00020000 00000000                                        114 WAITPSW  DC    X'0002000000000000',AD(0)  Normal end - disabled wait
0000000000000260  00020000 00000000                                        115 HARDWAIT DC    X'0002000000000000',XL6'00',X'DEAD' Abnormal end
                                                                           116 *
0000000000000270  00000000                                                 117 CTLR0    DS    F
0000000000000274  00000000                                                 118 FPCREGNT DC    X'00000000'  FPCR, trap all IEEE exceptions, zero flags
0000000000000278  F8000000                                                 119 FPCREGTR DC    X'F8000000'  FPCR, trap no IEEE exceptions, zero flags
                                                                           120 *
                                                                           121 * Input values parameter list, four fullwords:
                                                                           122 *      1) Count,
                                                                           123 *      2) Address of inputs,
                                                                           124 *      3) Address to place results, and
                                                                           125 *      4) Address to place DXC/Flags/cc values.
                                                                           126 *
000000000000027C                      000000000000027C  0000000000000280   127          ORG   BFPCVTTF+X'280'
0000000000000280                                                           128 SHORTS   DS    0F           Inputs for short BFP testing
0000000000000280  00000008                                                 129          DC    A(SBFPCT/4)
0000000000000284  00000830                                                 130          DC    A(SBFPIN)
0000000000000288  00001000                                                 131          DC    A(SINTOUT)
000000000000028C  00001080                                                 132          DC    A(SINTFLGS)
                                                                           133 *
0000000000000290                                                           134 LONGS    DS    0F           Inputs for long BFP testing
0000000000000290  00000008                                                 135          DC    A(LBFPCT/8)
0000000000000294  00000878                                                 136          DC    A(LBFPIN)
0000000000000298  00001700                                                 137          DC    A(LINTOUT)
000000000000029C  00001780                                                 138          DC    A(LINTFLGS)
                                                                           139 *
00000000000002A0                                                           140 EXTDS    DS    0F           Inputs for Extended BFP testing
00000000000002A0  00000008                                                 141          DC    A(XBFPCT/16)
00000000000002A4  00000908                                                 142          DC    A(XBFPIN)
00000000000002A8  00001E00                                                 143          DC    A(XINTOUT)
00000000000002AC  00001E80                                                 144          DC    A(XINTFLGS)
                                                                           145 *
00000000000002B0  0000000A                                                 146 RMSHORTS DC    A(SBFPRMCT/4)
00000000000002B4  00000850                                                 147          DC    A(SBFPINRM)  Short BFP rounding mode test inputs
00000000000002B8  00001100                                                 148          DC    A(SINTRMO)   Short BFP rounding mode test results
00000000000002BC  00001500                                                 149          DC    A(SINTRMOF)  Short BFP rounding mode test flags
                                                                           150 *
00000000000002C0  0000000A                                                 151 RMLONGS  DC    A(LBFPRMCT/8)
00000000000002C4  000008B8                                                 152          DC    A(LBFPINRM)  Long BFP rounding mode test inputs
00000000000002C8  00001800                                                 153          DC    A(LINTRMO)   Long BFP rounding mode test results
00000000000002CC  00001C00                                                 154          DC    A(LINTRMOF)  Long BFP rounding mode test flags
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page     4

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           155 *
00000000000002D0  0000000A                                                 156 RMEXTDS  DC    A(XBFPRMCT/16)
00000000000002D4  00000988                                                 157          DC    A(XBFPINRM)  Extended BFP rounding mode test inputs
00000000000002D8  00001F00                                                 158          DC    A(XINTRMO)   Extended BFP rounding mode test results
00000000000002DC  00002300                                                 159          DC    A(XINTRMOF)  Space for rounding mode test flags
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page     5

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           161 ***********************************************************************
                                                                           162 *
                                                                           163 * Convert short BFP to integer-64 format.  A pair of results is
                                                                           164 * generated for each input: one with all exceptions non-trappable, and
                                                                           165 * the second with all exceptions trappable.   The FPCR and condition
                                                                           166 * code is stored for each result.
                                                                           167 *
                                                                           168 ***********************************************************************


00000000000002E0  9823 A000                             0000000000000000   170 CGEBR    LM    R2,R3,0(R10)  Get count and address of test input values
00000000000002E4  9878 A008                             0000000000000008   171          LM    R7,R8,8(R10)  Get address of result area and flag area.
00000000000002E8  1222                                                     172          LTR   R2,R2         Any test cases?
00000000000002EA  078D                                                     173          BZR   R13           ..No, return to caller
00000000000002EC  0DC0                                                     174          BASR  R12,0         Set top of loop
                                                                           175 *
00000000000002EE  7800 3000                             0000000000000000   176          LE    R0,0(0,R3)    Get short BFP test value
00000000000002F2  B29D 0274                             0000000000000274   177          LFPC  FPCREGNT      Set exceptions non-trappable
00000000000002F6  B3A8 0010                                                178          CGEBR R1,R0         Cvt float in FPR0 to Int in GPR1
00000000000002FA  E310 7000 0024                        0000000000000000   179          STG   R1,0(0,R7)    Store int-64 result
0000000000000300  B29C 8000                             0000000000000000   180          STFPC 0*4(R8)       Store resulting FPCR flags and DXC
0000000000000304  B222 0010                                                181          IPM   R1            Get condition code and program mask
0000000000000308  8810 001C                             000000000000001C   182          SRL   R1,28         Isolate CC in low order byte
000000000000030C  4210 8003                             0000000000000003   183          STC   R1,(0*4)+3(0,R8)  Save cc as low byte of FPCR
                                                                           184 *
0000000000000310  B29D 0278                             0000000000000278   185          LFPC  FPCREGTR      Set exceptions trappable
0000000000000314  B982 0011                                                186          XGR   R1,R1         Clear any residual result in R1
0000000000000318  0410                                                     187          SPM   R1            Clear out any residual nz condition code
000000000000031A  B3A8 0010                                                188          CGEBR R1,R0         Cvt float in FPR0 to Int in GPR1
000000000000031E  E310 7008 0024                        0000000000000008   189          STG   R1,8(0,R7)    Store short BFP result
0000000000000324  B29C 8004                             0000000000000004   190          STFPC 4(R8)         Store resulting FPCR flags and DXC
0000000000000328  B222 0010                                                191          IPM   R1            Get condition code and program mask
000000000000032C  8810 001C                             000000000000001C   192          SRL   R1,28         Isolate CC in low order byte
0000000000000330  4210 8007                             0000000000000007   193          STC   R1,(1*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           194 *
0000000000000334  4130 3004                             0000000000000004   195          LA    R3,4(0,R3)    Point to next input value
0000000000000338  4170 7010                             0000000000000010   196          LA    R7,2*8(0,R7)  Point to next int-64 converted value pair
000000000000033C  4180 8008                             0000000000000008   197          LA    R8,2*4(0,R8)  Point to next FPCR/CC result area
0000000000000340  062C                                                     198          BCTR  R2,R12        Convert next input value.
0000000000000342  07FD                                                     199          BR    R13           All converted; return.
                                                                           200 *
                                                                           201 * Convert short BFP to integers using each possible rounding mode.
                                                                           202 * Ten test results are generated for each input.  A 48-byte test result
                                                                           203 * section is used to keep results sets aligned on a quad-double word.
                                                                           204 *
                                                                           205 * The first four tests use rounding modes specified in the FPC with the
                                                                           206 * IEEE Inexact exception supressed.  SRNM (2-bit) is used  for the
                                                                           207 * first two FPCR-controlled tests and SRNMB (3-bit) is used for the
                                                                           208 * last two To get full coverage of that instruction pair.
                                                                           209 *
                                                                           210 * The next six results use instruction-specified rounding modes.
                                                                           211 *
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page     6

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           212 * The default rounding mode (0 for RNTE) is not tested in this section;
                                                                           213 * prior tests used the default rounding mode.  RNTE is tested
                                                                           214 * explicitly as a rounding mode in this section.
                                                                           215 *
0000000000000344  9823 A000                             0000000000000000   216 CGEBRA   LM    R2,R3,0(R10)  Get count and address of test input values
0000000000000348  9878 A008                             0000000000000008   217          LM    R7,R8,8(R10)  Get address of result area and flag area.
000000000000034C  1222                                                     218          LTR   R2,R2         Any test cases?
000000000000034E  078D                                                     219          BZR   R13           ..No, return to caller
0000000000000350  0DC0                                                     220          BASR  R12,0         Set top of loop
                                                                           221 *
0000000000000352  7800 3000                             0000000000000000   222          LE    R0,0(0,R3)    Get short BFP test value
                                                                           223 *
                                                                           224 * Test cases using rounding mode specified in the FPCR
                                                                           225 *
0000000000000356  B29D 0274                             0000000000000274   226          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
000000000000035A  B2B8 0001                             0000000000000001   227          SRNMB 1             SET FPCR to RZ, towards zero.
000000000000035E  B3A8 0410                                                228          CGEBRA R1,0,R0,B'0100'  FPCR ctl'd rounding, inexact masked
0000000000000362  E310 7000 0024                        0000000000000000   229          STG   R1,0*8(0,R7)  Store integer-64 result
0000000000000368  B29C 8000                             0000000000000000   230          STFPC 0(R8)         Store resulting FPCR flags and DXC
000000000000036C  B222 0010                                                231          IPM   R1            Get condition code and program mask
0000000000000370  8810 001C                             000000000000001C   232          SRL   R1,28         Isolate CC in low order byte
0000000000000374  4210 8003                             0000000000000003   233          STC   R1,3(0,R8)    Save cccas low byte of FPCR
                                                                           234 *
0000000000000378  B29D 0274                             0000000000000274   235          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
000000000000037C  B2B8 0002                             0000000000000002   236          SRNMB 2             SET FPCR to RP, to +infinity
0000000000000380  B3A8 0410                                                237          CGEBRA R1,0,R0,B'0100'  FPCR ctl'd rounding, inexact masked
0000000000000384  E310 7008 0024                        0000000000000008   238          STG   R1,1*8(0,R7)  Store integer-64 result
000000000000038A  B29C 8004                             0000000000000004   239          STFPC 1*4(R8)       Store resulting FPCR flags and DXC
000000000000038E  B222 0010                                                240          IPM   R1            Get condition code and program mask
0000000000000392  8810 001C                             000000000000001C   241          SRL   R1,28         Isolate CC in low order byte
0000000000000396  4210 8007                             0000000000000007   242          STC   R1,(1*4)+3(0,R8)  Save cccas low byte of FPCR
                                                                           243 *
000000000000039A  B29D 0274                             0000000000000274   244          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
000000000000039E  B2B8 0003                             0000000000000003   245          SRNMB 3             SET FPCR to RM, to -infinity
00000000000003A2  B3A8 0410                                                246          CGEBRA R1,0,R0,B'0100'  FPCR ctl'd rounding, inexact masked
00000000000003A6  E310 7010 0024                        0000000000000010   247          STG   R1,2*8(0,R7)  Store integer-64 result
00000000000003AC  B29C 8008                             0000000000000008   248          STFPC 2*4(R8)       Store resulting FPCR flags and DXC
00000000000003B0  B222 0010                                                249          IPM   R1            Get condition code and program mask
00000000000003B4  8810 001C                             000000000000001C   250          SRL   R1,28         Isolate CC in low order byte
00000000000003B8  4210 800B                             000000000000000B   251          STC   R1,(2*4)+3(0,R8)  Save cccas low byte of FPCR
                                                                           252 *
00000000000003BC  B29D 0274                             0000000000000274   253          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
00000000000003C0  B2B8 0007                             0000000000000007   254          SRNMB 7             RPS, Prepare for Shorter Precision
00000000000003C4  B3A8 0410                                                255          CGEBRA R1,0,R0,B'0100'  FPCR ctl'd rounding, inexact masked
00000000000003C8  E310 7018 0024                        0000000000000018   256          STG   R1,3*8(0,R7)  Store integer-64 result
00000000000003CE  B29C 800C                             000000000000000C   257          STFPC 3*4(R8)       Store resulting FPCR flags and DXC
00000000000003D2  B222 0010                                                258          IPM   R1            Get condition code and program mask
00000000000003D6  8810 001C                             000000000000001C   259          SRL   R1,28         Isolate CC in low order byte
00000000000003DA  4210 800F                             000000000000000F   260          STC   R1,(3*4)+3(0,R8)  Save cccas low byte of FPCR
                                                                           261 *
00000000000003DE  B29D 0274                             0000000000000274   262          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
00000000000003E2  B3A8 1010                                                263          CGEBRA R1,1,R0,B'0000'  RNTA, to nearest, ties away from zero
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page     7

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

00000000000003E6  E310 7020 0024                        0000000000000020   264          STG   R1,4*8(0,R7)  Store integer-64 result
00000000000003EC  B29C 8010                             0000000000000010   265          STFPC 4*4(R8)       Store resulting FPCR flags and DXC
00000000000003F0  B222 0010                                                266          IPM   R1            Get condition code and program mask
00000000000003F4  8810 001C                             000000000000001C   267          SRL   R1,28         Isolate CC in low order byte
00000000000003F8  4210 8013                             0000000000000013   268          STC   R1,(4*4)+3(0,R8)  Save cc as low byte of FPCR
                                                                           269 *
00000000000003FC  B29D 0274                             0000000000000274   270          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
0000000000000400  B3A8 3010                                                271          CGEBRA R1,3,R0,B'0000'  RFS, to prepare for shorter precision
0000000000000404  E310 7028 0024                        0000000000000028   272          STG   R1,5*8(0,R7)  Store integer-64 result
000000000000040A  B29C 8014                             0000000000000014   273          STFPC 5*4(R8)       Store resulting FPCR flags and DXC
000000000000040E  B222 0010                                                274          IPM   R1            Get condition code and program mask
0000000000000412  8810 001C                             000000000000001C   275          SRL   R1,28         Isolate CC in low order byte
0000000000000416  4210 8017                             0000000000000017   276          STC   R1,(5*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           277 *
000000000000041A  B29D 0274                             0000000000000274   278          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
000000000000041E  B3A8 4010                                                279          CGEBRA R1,4,R0,B'0000'  RNTE, to nearest, ties to even
0000000000000422  E310 7030 0024                        0000000000000030   280          STG   R1,6*8(0,R7)  Store integer-64 result
0000000000000428  B29C 8018                             0000000000000018   281          STFPC 6*4(R8)       Store resulting FPCR flags and DXC
000000000000042C  B222 0010                                                282          IPM   R1            Get condition code and program mask
0000000000000430  8810 001C                             000000000000001C   283          SRL   R1,28         Isolate CC in low order byte
0000000000000434  4210 801B                             000000000000001B   284          STC   R1,(6*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           285 *
0000000000000438  B29D 0274                             0000000000000274   286          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
000000000000043C  B3A8 5010                                                287          CGEBRA R1,5,R0,B'0000'  RZ, toward zero
0000000000000440  E310 7038 0024                        0000000000000038   288          STG   R1,7*8(0,R7)  Store integer-64 result
0000000000000446  B29C 801C                             000000000000001C   289          STFPC 7*4(R8)       Store resulting FPCR flags and DXC
000000000000044A  B222 0010                                                290          IPM   R1            Get condition code and program mask
000000000000044E  8810 001C                             000000000000001C   291          SRL   R1,28         Isolate CC in low order byte
0000000000000452  4210 801F                             000000000000001F   292          STC   R1,(7*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           293 *
0000000000000456  B29D 0274                             0000000000000274   294          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
000000000000045A  B3A8 6010                                                295          CGEBRA R1,6,R0,B'0000'  RP, to +inf
000000000000045E  E310 7040 0024                        0000000000000040   296          STG   R1,8*8(0,R7)  Store integer-64 result
0000000000000464  B29C 8020                             0000000000000020   297          STFPC 8*4(R8)       Store resulting FPCR flags and DXC
0000000000000468  B222 0010                                                298          IPM   R1            Get condition code and program mask
000000000000046C  8810 001C                             000000000000001C   299          SRL   R1,28         Isolate CC in low order byte
0000000000000470  4210 8023                             0000000000000023   300          STC   R1,(8*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           301 *
0000000000000474  B29D 0274                             0000000000000274   302          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
0000000000000478  B3A8 7010                                                303          CGEBRA R1,7,R0,B'0000'  RM, to -inf
000000000000047C  E310 7048 0024                        0000000000000048   304          STG   R1,9*8(0,R7)  Store integer-64 result
0000000000000482  B29C 8024                             0000000000000024   305          STFPC 9*4(R8)       Store resulting FPCR flags and DXC
0000000000000486  B222 0010                                                306          IPM   R1            Get condition code and program mask
000000000000048A  8810 001C                             000000000000001C   307          SRL   R1,28         Isolate CC in low order byte
000000000000048E  4210 8027                             0000000000000027   308          STC   R1,(9*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           309 *
0000000000000492  4130 3004                             0000000000000004   310          LA    R3,4(0,R3)    Point to next input value
0000000000000496  4170 7050                             0000000000000050   311          LA    R7,10*8(0,R7)  Point to next short BFP converted values
000000000000049A  4180 8030                             0000000000000030   312          LA    R8,12*4(0,R8)  Point to next FPCR/CC result area
000000000000049E  062C                                                     313          BCTR  R2,R12        Convert next input value.
00000000000004A0  07FD                                                     314          BR    R13           All converted; return.
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page     8

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           316 ***********************************************************************
                                                                           317 *
                                                                           318 * Convert long BFP inputs to integer-64.  A pair of results is
                                                                           319 * generated for each input: one with all exceptions non-trappable, and
                                                                           320 * the second with all exceptions trappable.   The FPCR and condition
                                                                           321 * code is stored for each result.
                                                                           322 *
                                                                           323 ***********************************************************************


00000000000004A2  9823 A000                             0000000000000000   325 CGDBR    LM    R2,R3,0(R10)  Get count and address of test input values
00000000000004A6  9878 A008                             0000000000000008   326          LM    R7,R8,8(R10)  Get address of result area and flag area.
00000000000004AA  1222                                                     327          LTR   R2,R2         Any test cases?
00000000000004AC  078D                                                     328          BZR   R13           ..No, return to caller
00000000000004AE  0DC0                                                     329          BASR  R12,0         Set top of loop
                                                                           330 *
00000000000004B0  6800 3000                             0000000000000000   331          LD    R0,0(0,R3)    Get long BFP test value
00000000000004B4  B29D 0274                             0000000000000274   332          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
00000000000004B8  B3A9 0010                                                333          CGDBR R1,R0         Cvt float in FPR0 to Int in GPR1
00000000000004BC  E310 7000 0024                        0000000000000000   334          STG   R1,0(0,R7)    Store long BFP result
00000000000004C2  B29C 8000                             0000000000000000   335          STFPC 0*4(R8)       Store resulting FPCR flags and DXC
00000000000004C6  B222 0010                                                336          IPM   R1            Get condition code and program mask
00000000000004CA  8810 001C                             000000000000001C   337          SRL   R1,28         Isolate CC in low order byte
00000000000004CE  4210 8003                             0000000000000003   338          STC   R1,(0*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           339 *
00000000000004D2  B29D 0278                             0000000000000278   340          LFPC  FPCREGTR      Set exceptions trappable, clear flags
00000000000004D6  B982 0011                                                341          XGR   R1,R1         Clear any residual result in R1
00000000000004DA  0410                                                     342          SPM   R1            Clear out any residual nz condition code
00000000000004DC  B3A9 0010                                                343          CGDBR R1,R0         Cvt float in FPR0 to Int in GPR1
00000000000004E0  E310 7008 0024                        0000000000000008   344          STG   R1,8(0,R7)    Store int-64 result
00000000000004E6  B29C 8004                             0000000000000004   345          STFPC 1*4(R8)       Store resulting FPCR flags and DXC
00000000000004EA  B222 0010                                                346          IPM   R1            Get condition code and program mask
00000000000004EE  8810 001C                             000000000000001C   347          SRL   R1,28         Isolate CC in low order byte
00000000000004F2  4210 8007                             0000000000000007   348          STC   R1,(1*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           349 *
00000000000004F6  4130 3008                             0000000000000008   350          LA    R3,8(0,R3)    point to next input values
00000000000004FA  4170 7010                             0000000000000010   351          LA    R7,16(0,R7)   Point to next int-64 converted value pair
00000000000004FE  4180 8008                             0000000000000008   352          LA    R8,8(0,R8)    Point to next FPCR/CC result area
0000000000000502  062C                                                     353          BCTR  R2,R12        Convert next input value.
0000000000000504  07FD                                                     354          BR    R13           All converted; return.
                                                                           355 *
                                                                           356 * Convert long BFP to integers using each possible rounding mode.
                                                                           357 * Ten test results are generated for each input.  A 48-byte test result
                                                                           358 * section is used to keep results sets aligned on a quad-double word.
                                                                           359 *
                                                                           360 * The first four tests use rounding modes specified in the FPC with the
                                                                           361 * IEEE Inexact exception supressed.  SRNM (2-bit) is used  for the
                                                                           362 * first two FPCR-controlled tests and SRNMB (3-bit) is used for the
                                                                           363 * last two To get full coverage of that instruction pair.
                                                                           364 *
                                                                           365 * The next six results use instruction-specified rounding modes.
                                                                           366 *
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page     9

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           367 * The default rounding mode (0 for RNTE) is not tested in this section;
                                                                           368 * prior tests used the default rounding mode.  RNTE is tested
                                                                           369 * explicitly as a rounding mode in this section.
                                                                           370 *
0000000000000506  9823 A000                             0000000000000000   371 CGDBRA   LM    R2,R3,0(R10)  Get count and address of test input values
000000000000050A  9878 A008                             0000000000000008   372          LM    R7,R8,8(R10)  Get address of result area and flag area.
000000000000050E  1222                                                     373          LTR   R2,R2         Any test cases?
0000000000000510  078D                                                     374          BZR   R13           ..No, return to caller
0000000000000512  0DC0                                                     375          BASR  R12,0         Set top of loop
                                                                           376 *
0000000000000514  6800 3000                             0000000000000000   377          LD    R0,0(0,R3)    Get long BFP test value
                                                                           378 *
                                                                           379 *  Cvt float in FPR0 to integer-64
                                                                           380 *
                                                                           381 * Test cases using rounding mode specified in the FPCR
                                                                           382 *
0000000000000518  B29D 0274                             0000000000000274   383          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
000000000000051C  B2B8 0001                             0000000000000001   384          SRNMB 1             SET FPCR to RZ, towards zero.
0000000000000520  B3A9 0410                                                385          CGDBRA R1,0,R0,B'0100'  FPCR ctl'd rounding, inexact masked
0000000000000524  E310 7000 0024                        0000000000000000   386          STG   R1,0*8(0,R7)  Store integer-64 result
000000000000052A  B29C 8000                             0000000000000000   387          STFPC 0(R8)         Store resulting FPCR flags and DXC
000000000000052E  B222 0010                                                388          IPM   R1            Get condition code and program mask
0000000000000532  8810 001C                             000000000000001C   389          SRL   R1,28         Isolate CC in low order byte
0000000000000536  4210 8003                             0000000000000003   390          STC   R1,3(0,R8)    Save CC as low byte of FPCR
                                                                           391 *
000000000000053A  B29D 0274                             0000000000000274   392          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
000000000000053E  B2B8 0002                             0000000000000002   393          SRNMB 2             SET FPCR to RP, to +infinity
0000000000000542  B3A9 0410                                                394          CGDBRA R1,0,R0,B'0100'  FPCR ctl'd rounding, inexact masked
0000000000000546  E310 7008 0024                        0000000000000008   395          STG   R1,1*8(0,R7)  Store integer-64 result
000000000000054C  B29C 8004                             0000000000000004   396          STFPC 1*4(R8)       Store resulting FPCR flags and DXC
0000000000000550  B222 0010                                                397          IPM   R1            Get condition code and program mask
0000000000000554  8810 001C                             000000000000001C   398          SRL   R1,28         Isolate CC in low order byte
0000000000000558  4210 8007                             0000000000000007   399          STC   R1,(1*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           400 *
000000000000055C  B29D 0274                             0000000000000274   401          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
0000000000000560  B2B8 0003                             0000000000000003   402          SRNMB 3             SET FPCR to RM, to -infinity
0000000000000564  B3A9 0410                                                403          CGDBRA R1,0,R0,B'0100'  FPCR ctl'd rounding, inexact masked
0000000000000568  E310 7010 0024                        0000000000000010   404          STG   R1,2*8(0,R7)  Store integer-64 result
000000000000056E  B29C 8008                             0000000000000008   405          STFPC 2*4(R8)       Store resulting FPCR flags and DXC
0000000000000572  B222 0010                                                406          IPM   R1            Get condition code and program mask
0000000000000576  8810 001C                             000000000000001C   407          SRL   R1,28         Isolate CC in low order byte
000000000000057A  4210 800B                             000000000000000B   408          STC   R1,(2*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           409 *
000000000000057E  B29D 0274                             0000000000000274   410          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
0000000000000582  B2B8 0007                             0000000000000007   411          SRNMB 7             RPS, Prepare for Shorter Precision
0000000000000586  B3A9 0410                                                412          CGDBRA R1,0,R0,B'0100'  FPCR ctl'd rounding, inexact masked
000000000000058A  E310 7018 0024                        0000000000000018   413          STG   R1,3*8(0,R7)  Store integer-64 result
0000000000000590  B29C 800C                             000000000000000C   414          STFPC 3*4(R8)       Store resulting FPCR flags and DXC
0000000000000594  B222 0010                                                415          IPM   R1            Get condition code and program mask
0000000000000598  8810 001C                             000000000000001C   416          SRL   R1,28         Isolate CC in low order byte
000000000000059C  4210 800F                             000000000000000F   417          STC   R1,(3*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           418 *
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page    10

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

00000000000005A0  B29D 0274                             0000000000000274   419          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
00000000000005A4  B3A9 1010                                                420          CGDBRA R1,1,R0,B'0000'  RNTA, to nearest, ties away from zero
00000000000005A8  E310 7020 0024                        0000000000000020   421          STG   R1,4*8(0,R7)  Store integer-64 result
00000000000005AE  B29C 8010                             0000000000000010   422          STFPC 4*4(R8)       Store resulting FPCR flags and DXC
00000000000005B2  B222 0010                                                423          IPM   R1            Get condition code and program mask
00000000000005B6  8810 001C                             000000000000001C   424          SRL   R1,28         Isolate CC in low order byte
00000000000005BA  4210 8013                             0000000000000013   425          STC   R1,(4*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           426 *
00000000000005BE  B29D 0274                             0000000000000274   427          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
00000000000005C2  B3A9 3010                                                428          CGDBRA R1,3,R0,B'0000'  RFS, to prepare for shorter precision
00000000000005C6  E310 7028 0024                        0000000000000028   429          STG   R1,5*8(0,R7)  Store integer-64 result
00000000000005CC  B29C 8014                             0000000000000014   430          STFPC 5*4(R8)       Store resulting FPCR flags and DXC
00000000000005D0  B222 0010                                                431          IPM   R1            Get condition code and program mask
00000000000005D4  8810 001C                             000000000000001C   432          SRL   R1,28         Isolate CC in low order byte
00000000000005D8  4210 8017                             0000000000000017   433          STC   R1,(5*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           434 *
00000000000005DC  B29D 0274                             0000000000000274   435          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
00000000000005E0  B3A9 4010                                                436          CGDBRA R1,4,R0,B'0000'  RNTE, to nearest, ties to even
00000000000005E4  E310 7030 0024                        0000000000000030   437          STG   R1,6*8(0,R7)  Store integer-64 result
00000000000005EA  B29C 8018                             0000000000000018   438          STFPC 6*4(R8)       Store resulting FPCR flags and DXC
00000000000005EE  B222 0010                                                439          IPM   R1            Get condition code and program mask
00000000000005F2  8810 001C                             000000000000001C   440          SRL   R1,28         Isolate CC in low order byte
00000000000005F6  4210 801B                             000000000000001B   441          STC   R1,(6*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           442 *
00000000000005FA  B29D 0274                             0000000000000274   443          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
00000000000005FE  B3A9 5010                                                444          CGDBRA R1,5,R0,B'0000'  RZ, toward zero
0000000000000602  E310 7038 0024                        0000000000000038   445          STG   R1,7*8(0,R7)  Store integer-64 result
0000000000000608  B29C 801C                             000000000000001C   446          STFPC 7*4(R8)       Store resulting FPCR flags and DXC
000000000000060C  B222 0010                                                447          IPM   R1            Get condition code and program mask
0000000000000610  8810 001C                             000000000000001C   448          SRL   R1,28         Isolate CC in low order byte
0000000000000614  4210 801F                             000000000000001F   449          STC   R1,(7*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           450 *
0000000000000618  B29D 0274                             0000000000000274   451          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
000000000000061C  B3A9 6010                                                452          CGDBRA R1,6,R0,B'0000'  RP, to +inf
0000000000000620  E310 7040 0024                        0000000000000040   453          STG   R1,8*8(0,R7)  Store integer-64 result
0000000000000626  B29C 8020                             0000000000000020   454          STFPC 8*4(R8)       Store resulting FPCR flags and DXC
000000000000062A  B222 0010                                                455          IPM   R1            Get condition code and program mask
000000000000062E  8810 001C                             000000000000001C   456          SRL   R1,28         Isolate CC in low order byte
0000000000000632  4210 8023                             0000000000000023   457          STC   R1,(8*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           458 *
0000000000000636  B29D 0274                             0000000000000274   459          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
000000000000063A  B3A9 7010                                                460          CGDBRA R1,7,R0,B'0000'  RM, to -inf
000000000000063E  E310 7048 0024                        0000000000000048   461          STG   R1,9*8(0,R7)  Store integer-64 result
0000000000000644  B29C 8024                             0000000000000024   462          STFPC 9*4(R8)       Store resulting FPCR flags and DXC
0000000000000648  B222 0010                                                463          IPM   R1            Get condition code and program mask
000000000000064C  8810 001C                             000000000000001C   464          SRL   R1,28         Isolate CC in low order byte
0000000000000650  4210 8027                             0000000000000027   465          STC   R1,(9*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           466 *
0000000000000654  4130 3008                             0000000000000008   467          LA    R3,8(0,R3)    point to next input value
0000000000000658  4170 7050                             0000000000000050   468          LA    R7,10*8(0,R7)  Point to next long BFP converted values
000000000000065C  4180 8030                             0000000000000030   469          LA    R8,12*4(0,R8)  Point to next FPCR/CC result area
0000000000000660  062C                                                     470          BCTR  R2,R12        Convert next input value.
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page    11

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

0000000000000662  07FD                                                     471          BR    R13           All converted; return.
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page    12

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           473 ***********************************************************************
                                                                           474 *
                                                                           475 * Convert extended BFP to integer-64.  A pair of results is generated
                                                                           476 * for each input: one with all exceptions non-trappable, and the
                                                                           477 * second with all exceptions trappable.   The FPCR and condition code
                                                                           478 * are stored for each result.
                                                                           479 *
                                                                           480 ***********************************************************************


0000000000000664  9823 A000                             0000000000000000   482 CGXBR    LM    R2,R3,0(R10)  Get count and address of test input values
0000000000000668  9878 A008                             0000000000000008   483          LM    R7,R8,8(R10)  Get address of result area and flag area.
000000000000066C  1222                                                     484          LTR   R2,R2         Any test cases?
000000000000066E  078D                                                     485          BZR   R13           ..No, return to caller
0000000000000670  0DC0                                                     486          BASR  R12,0         Set top of loop
                                                                           487 *
0000000000000672  6800 3000                             0000000000000000   488          LD    R0,0(0,R3)    Get extended BFP test value part 1
0000000000000676  6820 3008                             0000000000000008   489          LD    R2,8(0,R3)    Get extended BFP test value part 1
000000000000067A  B29D 0274                             0000000000000274   490          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
000000000000067E  B3AA 0010                                                491          CGXBR R1,R0         Cvt float in FPR0-FPR2 to Int-64 in GPR1
0000000000000682  E310 7000 0024                        0000000000000000   492          STG   R1,0(0,R7)    Store integer-64 result
0000000000000688  B29C 8000                             0000000000000000   493          STFPC (0*4)(R8)     Store resulting FPCR flags and DXC
000000000000068C  B222 0010                                                494          IPM   R1            Get condition code and program mask
0000000000000690  8810 001C                             000000000000001C   495          SRL   R1,28         Isolate CC in low order byte
0000000000000694  4210 8003                             0000000000000003   496          STC   R1,(0*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           497 *
0000000000000698  B29D 0278                             0000000000000278   498          LFPC  FPCREGTR      Set exceptions trappable, clear flags
000000000000069C  B982 0011                                                499          XGR   R1,R1         Clear any residual result in R1
00000000000006A0  0410                                                     500          SPM   R1            Clear out any residual nz condition code
00000000000006A2  B3AA 0010                                                501          CGXBR R1,R0         Cvt float in FPR0-FPR2 to Int-64 in GPR1
00000000000006A6  E310 7008 0024                        0000000000000008   502          STG   R1,8(0,R7)    Store integer-64 result
00000000000006AC  B29C 8004                             0000000000000004   503          STFPC (1*4)(R8)     Store resulting FPCR flags and DXC
00000000000006B0  B222 0010                                                504          IPM   R1            Get condition code and program mask
00000000000006B4  8810 001C                             000000000000001C   505          SRL   R1,28         Isolate CC in low order byte
00000000000006B8  4210 8007                             0000000000000007   506          STC   R1,(1*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           507 *
00000000000006BC  4130 3010                             0000000000000010   508          LA    R3,16(0,R3)   Point to next extended BFP input value
00000000000006C0  4170 7010                             0000000000000010   509          LA    R7,16(0,R7)   Point to next int-64 converted value pair
00000000000006C4  4180 8008                             0000000000000008   510          LA    R8,8(0,R8)    Point to next FPCR/CC result area
00000000000006C8  062C                                                     511          BCTR  R2,R12        Convert next input value.
00000000000006CA  07FD                                                     512          BR    R13           All converted; return.
                                                                           513 *
                                                                           514 * Convert extended BFP to integers using each possible rounding mode.
                                                                           515 * Ten test results are generated for each input.  A 48-byte test result
                                                                           516 * section is used to keep results sets aligned on a quad-double word.
                                                                           517 *
                                                                           518 * The first four tests use rounding modes specified in the FPC with the
                                                                           519 * IEEE Inexact exception supressed.  SRNM (2-bit) is used  for the
                                                                           520 * first two FPCR-controlled tests and SRNMB (3-bit) is used for the
                                                                           521 * last two To get full coverage of that instruction pair.
                                                                           522 *
                                                                           523 * The next six results use instruction-specified rounding modes.
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page    13

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           524 *
                                                                           525 * The default rounding mode (0 for RNTE) is not tested in this section;
                                                                           526 * prior tests used the default rounding mode.  RNTE is tested
                                                                           527 * explicitly as a rounding mode in this section.
                                                                           528 *
00000000000006CC  9823 A000                             0000000000000000   529 CGXBRA   LM    R2,R3,0(R10)  Get count and address of test input values
00000000000006D0  9878 A008                             0000000000000008   530          LM    R7,R8,8(R10)  Get address of result area and flag area.
00000000000006D4  1222                                                     531          LTR   R2,R2         Any test cases?
00000000000006D6  078D                                                     532          BZR   R13           ..No, return to caller
00000000000006D8  0DC0                                                     533          BASR  R12,0         Set top of loop
                                                                           534 *
00000000000006DA  6800 3000                             0000000000000000   535          LD    R0,0(0,R3)    Get extended BFP test value part 1
00000000000006DE  6820 3008                             0000000000000008   536          LD    R2,8(0,R3)    Get extended BFP test value part 2
                                                                           537 *
                                                                           538 * Test cases using rounding mode specified in the FPCR
                                                                           539 *
00000000000006E2  B29D 0274                             0000000000000274   540          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
00000000000006E6  B2B8 0001                             0000000000000001   541          SRNMB 1             SET FPCR to RZ,  towards zero.
00000000000006EA  B3AA 0410                                                542          CGXBRA R1,0,R0,B'0100'  FPCR ctl'd rounding, inexact masked
00000000000006EE  E310 7000 0024                        0000000000000000   543          STG   R1,0*8(0,R7)  Store integer-64 result
00000000000006F4  B29C 8000                             0000000000000000   544          STFPC 0(R8)         Store resulting FPCR flags and DXC
00000000000006F8  B222 0010                                                545          IPM   R1            Get condition code and program mask
00000000000006FC  8810 001C                             000000000000001C   546          SRL   R1,28         Isolate CC in low order byte
0000000000000700  4210 8003                             0000000000000003   547          STC   R1,3(0,R8)    Save CC as low byte of FPCR
                                                                           548 *
0000000000000704  B29D 0274                             0000000000000274   549          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
0000000000000708  B2B8 0002                             0000000000000002   550          SRNMB 2             SET FPCR to RP,  to +infinity
000000000000070C  B3AA 0410                                                551          CGXBRA R1,0,R0,B'0100'  FPCR ctl'd rounding, inexact masked
0000000000000710  E310 7008 0024                        0000000000000008   552          STG   R1,1*8(0,R7)  Store integer-64 result
0000000000000716  B29C 8004                             0000000000000004   553          STFPC 1*4(R8)       Store resulting FPCR flags and DXC
000000000000071A  B222 0010                                                554          IPM   R1            Get condition code and program mask
000000000000071E  8810 001C                             000000000000001C   555          SRL   R1,28         Isolate CC in low order byte
0000000000000722  4210 8007                             0000000000000007   556          STC   R1,(1*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           557 *
0000000000000726  B29D 0274                             0000000000000274   558          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
000000000000072A  B2B8 0003                             0000000000000003   559          SRNMB 3             SET FPCR to RM, to -infinity
000000000000072E  B3AA 0410                                                560          CGXBRA R1,0,R0,B'0100'  FPCR ctl'd rounding, inexact masked
0000000000000732  E310 7010 0024                        0000000000000010   561          STG   R1,2*8(0,R7)  Store integer-64 result
0000000000000738  B29C 8008                             0000000000000008   562          STFPC 2*4(R8)       Store resulting FPCR flags and DXC
000000000000073C  B222 0010                                                563          IPM   R1            Get condition code and program mask
0000000000000740  8810 001C                             000000000000001C   564          SRL   R1,28         Isolate CC in low order byte
0000000000000744  4210 800B                             000000000000000B   565          STC   R1,(2*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           566 *
0000000000000748  B29D 0274                             0000000000000274   567          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
000000000000074C  B2B8 0007                             0000000000000007   568          SRNMB 7             RPS, Prepare for Shorter Precision
0000000000000750  B3AA 0410                                                569          CGXBRA R1,0,R0,B'0100'  FPCR ctl'd rounding, inexact masked
0000000000000754  E310 7018 0024                        0000000000000018   570          STG   R1,3*8(0,R7)  Store integer-64 result
000000000000075A  B29C 800C                             000000000000000C   571          STFPC 3*4(R8)       Store resulting FPCR flags and DXC
000000000000075E  B222 0010                                                572          IPM   R1            Get condition code and program mask
0000000000000762  8810 001C                             000000000000001C   573          SRL   R1,28         Isolate CC in low order byte
0000000000000766  4210 800F                             000000000000000F   574          STC   R1,(3*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           575 *
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page    14

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

000000000000076A  B29D 0274                             0000000000000274   576          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
000000000000076E  B3AA 1010                                                577          CGXBRA R1,1,R0,B'0000'  RNTA, to nearest, ties away from zero
0000000000000772  E310 7020 0024                        0000000000000020   578          STG   R1,4*8(0,R7)  Store integer-64 result
0000000000000778  B29C 8010                             0000000000000010   579          STFPC 4*4(R8)       Store resulting FPCR flags and DXC
000000000000077C  B222 0010                                                580          IPM   R1            Get condition code and program mask
0000000000000780  8810 001C                             000000000000001C   581          SRL   R1,28         Isolate CC in low order byte
0000000000000784  4210 8013                             0000000000000013   582          STC   R1,(4*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           583 *
0000000000000788  B29D 0274                             0000000000000274   584          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
000000000000078C  B3AA 3010                                                585          CGXBRA R1,3,R0,B'0000'  RFS, to prepare for shorter precision
0000000000000790  E310 7028 0024                        0000000000000028   586          STG   R1,5*8(0,R7)  Store integer-64 result
0000000000000796  B29C 8014                             0000000000000014   587          STFPC 5*4(R8)       Store resulting FPCR flags and DXC
000000000000079A  B222 0010                                                588          IPM   R1            Get condition code and program mask
000000000000079E  8810 001C                             000000000000001C   589          SRL   R1,28         Isolate CC in low order byte
00000000000007A2  4210 8017                             0000000000000017   590          STC   R1,(5*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           591 *
00000000000007A6  B29D 0274                             0000000000000274   592          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
00000000000007AA  B3AA 4010                                                593          CGXBRA R1,4,R0,B'0000'  RNTE to nearest, ties to even
00000000000007AE  E310 7030 0024                        0000000000000030   594          STG   R1,6*8(0,R7)  Store integer-64 result
00000000000007B4  B29C 8018                             0000000000000018   595          STFPC 6*4(R8)       Store resulting FPCR flags and DXC
00000000000007B8  B222 0010                                                596          IPM   R1            Get condition code and program mask
00000000000007BC  8810 001C                             000000000000001C   597          SRL   R1,28         Isolate CC in low order byte
00000000000007C0  4210 801B                             000000000000001B   598          STC   R1,(6*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           599 *
00000000000007C4  B29D 0274                             0000000000000274   600          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
00000000000007C8  B3AA 5010                                                601          CGXBRA R1,5,R0,B'0000'  RZ toward zero
00000000000007CC  E310 7038 0024                        0000000000000038   602          STG   R1,7*8(0,R7)  Store integer-64 result
00000000000007D2  B29C 801C                             000000000000001C   603          STFPC 7*4(R8)       Store resulting FPCR flags and DXC
00000000000007D6  B222 0010                                                604          IPM   R1            Get condition code and program mask
00000000000007DA  8810 001C                             000000000000001C   605          SRL   R1,28         Isolate CC in low order byte
00000000000007DE  4210 801F                             000000000000001F   606          STC   R1,(7*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           607 *
00000000000007E2  B29D 0274                             0000000000000274   608          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
00000000000007E6  B3AA 6010                                                609          CGXBRA R1,6,R0,B'0000'  to +inf
00000000000007EA  E310 7040 0024                        0000000000000040   610          STG   R1,8*8(0,R7)  Store integer-64 result
00000000000007F0  B29C 8020                             0000000000000020   611          STFPC 8*4(R8)       Store resulting FPCR flags and DXC
00000000000007F4  B222 0010                                                612          IPM   R1            Get condition code and program mask
00000000000007F8  8810 001C                             000000000000001C   613          SRL   R1,28         Isolate CC in low order byte
00000000000007FC  4210 8023                             0000000000000023   614          STC   R1,(8*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           615 *
0000000000000800  B29D 0274                             0000000000000274   616          LFPC  FPCREGNT      Set exceptions non-trappable, clear flags
0000000000000804  B3AA 7010                                                617          CGXBRA R1,7,R0,B'0000'  to -inf
0000000000000808  E310 7048 0024                        0000000000000048   618          STG   R1,9*8(0,R7)  Store integer-64 result
000000000000080E  B29C 8024                             0000000000000024   619          STFPC 9*4(R8)       Store resulting FPCR flags and DXC
0000000000000812  B222 0010                                                620          IPM   R1            Get condition code and program mask
0000000000000816  8810 001C                             000000000000001C   621          SRL   R1,28         Isolate CC in low order byte
000000000000081A  4210 8027                             0000000000000027   622          STC   R1,(9*4)+3(0,R8)  Save CC as low byte of FPCR
                                                                           623 *
000000000000081E  4130 3010                             0000000000000010   624          LA    R3,16(0,R3)   Point to next input value
0000000000000822  4170 7050                             0000000000000050   625          LA    R7,10*8(0,R7) Point to next long BFP converted values
0000000000000826  4180 8030                             0000000000000030   626          LA    R8,12*4(0,R8) Point to next FPCR/CC result area
000000000000082A  062C                                                     627          BCTR  R2,R12        Convert next input value.
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page    15

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

000000000000082C  07FD                                                     628          BR    R13           All converted; return.
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page    16

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           630 ***********************************************************************
                                                                           631 *
                                                                           632 * Short integer inputs for Convert From Fixed testing.  The same test
                                                                           633 * values in the appropriate input format are used for short, long,
                                                                           634 * and extended format tests.  The last four values should generate
                                                                           635 * exceptions.
                                                                           636 *
                                                                           637 ***********************************************************************


0000000000000830                                                           639 SBFPIN   DS    0F                Inputs for short BFP testing
0000000000000830  3F800000                                                 640          DC    X'3F800000'  +1.0
0000000000000834  40000000                                                 641          DC    X'40000000'  +2.0
0000000000000838  40800000                                                 642          DC    X'40800000'  +4.0
000000000000083C  C0000000                                                 643          DC    X'C0000000'  -2.0
0000000000000840  7F810000                                                 644          DC    X'7F810000'  SNaN
0000000000000844  7FC10000                                                 645          DC    X'7FC10000'  QNaN
0000000000000848  5F000001                                                 646          DC    X'5F000001'  +max int-64 + 1
                                                                           647 *                                         (+9223372036854775808 + 1)
000000000000084C  DF000002                                                 648          DC    X'DF000002'  -max int-64 - 2
                                                                           649 *                                         (-9223372036854775808 - 2)
0000000000000850                                                           650          DS    0F           required by asma for following EQU to work.
                                      0000000000000020  0000000000000001   651 SBFPCT   EQU   *-SBFPIN     Count of short BFP in list * 4
                                                                           652 *
0000000000000850                                                           653 SBFPINRM DS    0F
0000000000000850  C1180000                                                 654          DC    X'C1180000'         -9.5
0000000000000854  C0B00000                                                 655          DC    X'C0B00000'         -5.5
0000000000000858  C0200000                                                 656          DC    X'C0200000'         -2.5
000000000000085C  BFC00000                                                 657          DC    X'BFC00000'         -1.5
0000000000000860  BF000000                                                 658          DC    X'BF000000'         -0.5
0000000000000864  3F000000                                                 659          DC    X'3F000000'         +0.5
0000000000000868  3FC00000                                                 660          DC    X'3FC00000'         +1.5
000000000000086C  40200000                                                 661          DC    X'40200000'         +2.5
0000000000000870  40B00000                                                 662          DC    X'40B00000'         +5.5
0000000000000874  41180000                                                 663          DC    X'41180000'         +9.5
0000000000000878                                                           664          DS    0F           required by asma for following EQU to work.
                                      0000000000000028  0000000000000001   665 SBFPRMCT EQU   *-SBFPINRM   Count of short BFP * 4 for rounding tests
                                                                           666 *
0000000000000878                                                           667 LBFPIN   DS    0F                Inputs for long BFP testing
0000000000000878  3FF00000 00000000                                        668          DC    X'3FF0000000000000'    +1.0
0000000000000880  40000000 00000000                                        669          DC    X'4000000000000000'    +2.0
0000000000000888  40100000 00000000                                        670          DC    X'4010000000000000'    +4.0
0000000000000890  C0000000 00000000                                        671          DC    X'C000000000000000'    -2.0
0000000000000898  7FF01000 00000000                                        672          DC    X'7FF0100000000000'    SNaN
00000000000008A0  7FF81000 00000000                                        673          DC    X'7FF8100000000000'    QNaN
00000000000008A8  43E00000 00000000                                        674          DC    X'43E0000000000000'   +max int-64 + 1.
                                                                           675 *                          (+9223372036854775808 + 1)
00000000000008B0  C3E00000 00200000                                        676          DC    X'C3E0000000200000'   -max int-64 - 2
                                                                           677 *                          (-9223372036854775808 - 2)
00000000000008B8                                                           678          DS    0F           required by asma for following EQU to work.
                                      0000000000000040  0000000000000001   679 LBFPCT   EQU   *-LBFPIN     Count of long BFP in list * 8
                                                                           680 *
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page    17

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

00000000000008B8                                                           681 LBFPINRM DS    0F
00000000000008B8  C0230000 00000000                                        682          DC    X'C023000000000000'         -9.5
00000000000008C0  C0160000 00000000                                        683          DC    X'C016000000000000'         -5.5
00000000000008C8  C0040000 00000000                                        684          DC    X'C004000000000000'         -2.5
00000000000008D0  BFF80000 00000000                                        685          DC    X'BFF8000000000000'         -1.5
00000000000008D8  BFE00000 00000000                                        686          DC    X'BFE0000000000000'         -0.5
00000000000008E0  3FE00000 00000000                                        687          DC    X'3FE0000000000000'         +0.5
00000000000008E8  3FF80000 00000000                                        688          DC    X'3FF8000000000000'         +1.5
00000000000008F0  40040000 00000000                                        689          DC    X'4004000000000000'         +2.5
00000000000008F8  40160000 00000000                                        690          DC    X'4016000000000000'         +5.5
0000000000000900  40230000 00000000                                        691          DC    X'4023000000000000'         +9.5
0000000000000908                                                           692          DS    0F           required by asma for following EQU to work.
                                      0000000000000050  0000000000000001   693 LBFPRMCT EQU   *-LBFPINRM   Count of long BFP * 8 for rounding tests
                                                                           694 *
0000000000000908                                                           695 XBFPIN   DS    0D                Inputs for long BFP testing
0000000000000908  3FFF0000 00000000                                        696          DC    X'3FFF0000000000000000000000000000'    +1.0
0000000000000918  40000000 00000000                                        697          DC    X'40000000000000000000000000000000'    +2.0
0000000000000928  40010000 00000000                                        698          DC    X'40010000000000000000000000000000'    +4.0
0000000000000938  C0000000 00000000                                        699          DC    X'C0000000000000000000000000000000'    -2.0
0000000000000948  7FFF0100 00000000                                        700          DC    X'7FFF0100000000000000000000000000'    SNaN
0000000000000958  7FFF8100 00000000                                        701          DC    X'7FFF8100000000000000000000000000'    QNaN
0000000000000968  403E0000 00000000                                        702          DC    X'403E0000000000000000000000000000'   +max int-64 + 1
                                                                           703 *                                          (+9223372036854775808 + 1)
0000000000000978  C03E0000 00020000                                        704          DC    X'C03E0000000200000000000000000000'   -max int-64 - 2
                                                                           705 *                                          (-9223372036854775808 - 2)
0000000000000988                                                           706          DS    0D           required by asma for following EQU to work.
                                      0000000000000080  0000000000000001   707 XBFPCT   EQU   *-XBFPIN     Count of extended BFP in list * 16
                                                                           708 *
0000000000000988                                                           709 XBFPINRM DS    0D
0000000000000988  C0023000 00000000                                        710          DC    X'C0023000000000000000000000000000'         -9.5
0000000000000998  C0016000 00000000                                        711          DC    X'C0016000000000000000000000000000'         -5.5
00000000000009A8  C0004000 00000000                                        712          DC    X'C0004000000000000000000000000000'         -2.5
00000000000009B8  BFFF8000 00000000                                        713          DC    X'BFFF8000000000000000000000000000'         -1.5
00000000000009C8  BFFE0000 00000000                                        714          DC    X'BFFE0000000000000000000000000000'         -0.5
00000000000009D8  3FFE0000 00000000                                        715          DC    X'3FFE0000000000000000000000000000'         +0.5
00000000000009E8  3FFF8000 00000000                                        716          DC    X'3FFF8000000000000000000000000000'         +1.5
00000000000009F8  40004000 00000000                                        717          DC    X'40004000000000000000000000000000'         +2.5
0000000000000A08  40016000 00000000                                        718          DC    X'40016000000000000000000000000000'         +5.5
0000000000000A18  40023000 00000000                                        719          DC    X'40023000000000000000000000000000'         +9.5
0000000000000A28                                                           720          DS    0D           required by asma for following EQU to work.
                                      00000000000000A0  0000000000000001   721 XBFPRMCT EQU   *-XBFPINRM   Count of ext'd BFP * 16 for rounding tests
                                                                           722 *
                                                                           723 *  Locations for results
                                                                           724 *
                                      0000000000001000  0000000000000000   725 SINTOUT  EQU   BFPCVTTF+X'1000'    Integer-64 values from short BFP
                                                                           726 *                                  ..8 pairs used, no room for more
                                      0000000000001080  0000000000000000   727 SINTFLGS EQU   BFPCVTTF+X'1080'    FPCR flags and DXC from short BFP
                                                                           728 *                                  ..8 pairs used,room for 16
                                      0000000000001100  0000000000000000   729 SINTRMO  EQU   BFPCVTTF+X'1100'    Short rounding mode test results
                                                                           730 *                                  ..10 sets used, space fully used
                                      0000000000001500  0000000000000000   731 SINTRMOF EQU   BFPCVTTF+X'1500'    Short rounding mode FPCR contents
                                                                           732 *                                  ..10 sets used, space fully used
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page    18

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           733 *
                                      0000000000001700  0000000000000000   734 LINTOUT  EQU   BFPCVTTF+X'1700'    Integer-64 values from long BFP
                                                                           735 *                                  ..8 pairs used, no room for more
                                      0000000000001780  0000000000000000   736 LINTFLGS EQU   BFPCVTTF+X'1780'    FPCR flags and DXC from long BFP
                                                                           737 *                                  ..8 pairs used,room for 16
                                      0000000000001800  0000000000000000   738 LINTRMO  EQU   BFPCVTTF+X'1800'    Long rounding mode test results
                                                                           739 *                                  ..10 sets used, space fully used
                                      0000000000001C00  0000000000000000   740 LINTRMOF EQU   BFPCVTTF+X'1C00'    Long rounding mode FPCR contents
                                                                           741 *                                  ..10 sets used, space fully used
                                                                           742 *
                                      0000000000001E00  0000000000000000   743 XINTOUT  EQU   BFPCVTTF+X'1E00'    Integer-64 values from extended BFP
                                                                           744 *                                  ..8 pairs used, no room for more
                                      0000000000001E80  0000000000000000   745 XINTFLGS EQU   BFPCVTTF+X'1E80'    FPCR flags and DXC from extended BFP
                                                                           746 *                                  ..8 pairs used,room for 16
                                      0000000000001F00  0000000000000000   747 XINTRMO  EQU   BFPCVTTF+X'1F00'    Extended rounding mode test results
                                                                           748 *                                  ..10 sets used, space fully used
                                      0000000000002300  0000000000000000   749 XINTRMOF EQU   BFPCVTTF+X'2300'    Extended rndg mode FPCR contents
                                                                           750 *                                  ..10 sets used, space fully used
                                                                           751 *
0000000000000A28                                                           752          END
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page    19

     SYMBOL        TYPE  VALUE   LENGTH  DEFN  REFERENCES

BFPCVTTF            J    000000    2600    48   66   68   69   71   73  127  725  727  729  731  734  736  738  740  743  745  747
                                               749
CGDBR               I    0004A2       4   325  100
CGDBRA              I    000506       4   371  102
CGEBR               I    0002E0       4   170   93
CGEBRA              I    000344       4   216   95
CGXBR               I    000664       4   482  107
CGXBRA              I    0006CC       4   529  109
CTLR0               F    000270       4   117   86   87   88
EXTDS               F    0002A0       4   140  106
FPCREGNT            X    000274       4   118  177  226  235  244  253  262  270  278  286  294  302  332  383  392  401  410  419
                                               427  435  443  451  459  490  540  549  558  567  576  584  592  600  608  616
FPCREGTR            X    000278       4   119  185  340  498
HARDWAIT            X    000260       8   115   82
IMAGE               1    000000    2600     0
LBFPCT              U    000040       1   679  135
LBFPIN              F    000878       4   667  679  136
LBFPINRM            F    0008B8       4   681  693  152
LBFPRMCT            U    000050       1   693  151
LINTFLGS            U    001780       0   736  138
LINTOUT             U    001700       0   734  137
LINTRMO             U    001800       0   738  153
LINTRMOF            U    001C00       0   740  154
LONGS               F    000290       4   134   99
PCINTCD             H    00008E       2    67   79
PCNOTDTA            I    00020C       4    82   80
PCOLDPSW            U    000150       0    68   81
PROGCHK             H    000200       2    78   72
R0                  U    000000       1    49   86   88  176  178  188  222  228  237  246  255  263  271  279  287  295  303  331
                                               333  343  377  385  394  403  412  420  428  436  444  452  460  488  491  501  535
                                               542  551  560  569  577  585  593  601  609  617
R1                  U    000001       1    50  178  179  181  182  183  186  187  188  189  191  192  193  228  229  231  232  233
                                               237  238  240  241  242  246  247  249  250  251  255  256  258  259  260  263  264
                                               266  267  268  271  272  274  275  276  279  280  282  283  284  287  288  290  291
                                               292  295  296  298  299  300  303  304  306  307  308  333  334  336  337  338  341
                                               342  343  344  346  347  348  385  386  388  389  390  394  395  397  398  399  403
                                               404  406  407  408  412  413  415  416  417  420  421  423  424  425  428  429  431
                                               432  433  436  437  439  440  441  444  445  447  448  449  452  453  455  456  457
                                               460  461  463  464  465  491  492  494  495  496  499  500  501  502  504  505  506
                                               542  543  545  546  547  551  552  554  555  556  560  561  563  564  565  569  570
                                               572  573  574  577  578  580  581  582  585  586  588  589  590  593  594  596  597
                                               598  601  602  604  605  606  609  610  612  613  614  617  618  620  621  622
R10                 U    00000A       1    59   92   94   99  101  106  108  170  171  216  217  325  326  371  372  482  483  529
                                               530
R11                 U    00000B       1    60
R12                 U    00000C       1    61  174  198  220  313  329  353  375  470  486  511  533  627
R13                 U    00000D       1    62   93   95  100  102  107  109  173  199  219  314  328  354  374  471  485  512  532
                                               628
R14                 U    00000E       1    63
R15                 U    00000F       1    64
R2                  U    000002       1    51  170  172  198  216  218  313  325  327  353  371  373  470  482  484  489  511  529
                                               531  536  627
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page    20

     SYMBOL        TYPE  VALUE   LENGTH  DEFN  REFERENCES

R3                  U    000003       1    52  170  176  195  216  222  310  325  331  350  371  377  467  482  488  489  508  529
                                               535  536  624
R4                  U    000004       1    53
R5                  U    000005       1    54
R6                  U    000006       1    55
R7                  U    000007       1    56  171  179  189  196  217  229  238  247  256  264  272  280  288  296  304  311  326
                                               334  344  351  372  386  395  404  413  421  429  437  445  453  461  468  483  492
                                               502  509  530  543  552  561  570  578  586  594  602  610  618  625
R8                  U    000008       1    57  171  180  183  190  193  197  217  230  233  239  242  248  251  257  260  265  268
                                               273  276  281  284  289  292  297  300  305  308  312  326  335  338  345  348  352
                                               372  387  390  396  399  405  408  414  417  422  425  430  433  438  441  446  449
                                               454  457  462  465  469  483  493  496  503  506  510  530  544  547  553  556  562
                                               565  571  574  579  582  587  590  595  598  603  606  611  614  619  622  626
R9                  U    000009       1    58
RMEXTDS             A    0002D0       4   156  108
RMLONGS             A    0002C0       4   151  101
RMSHORTS            A    0002B0       4   146   94
SBFPCT              U    000020       1   651  129
SBFPIN              F    000830       4   639  651  130
SBFPINRM            F    000850       4   653  665  147
SBFPRMCT            U    000028       1   665  146
SHORTS              F    000280       4   128   92
SINTFLGS            U    001080       0   727  132
SINTOUT             U    001000       0   725  131
SINTRMO             U    001100       0   729  148
SINTRMOF            U    001500       0   731  149
START               I    000210       4    86   70
WAITPSW             X    000250       8   114  111
XBFPCT              U    000080       1   707  141
XBFPIN              D    000908       8   695  707  142
XBFPINRM            D    000988       8   709  721  157
XBFPRMCT            U    0000A0       1   721  156
XINTFLGS            U    001E80       0   745  144
XINTOUT             U    001E00       0   743  143
XINTRMO             U    001F00       0   747  158
XINTRMOF            U    002300       0   749  159
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page    21

MACRO   DEFN  REFERENCES

No defined macros
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page    22

   DESC     SYMBOL   SIZE    POS      ADDR

Entry: 0

Image      IMAGE     2600  000-A27  000-A27
  Region             2600  000-A27  000-A27
    CSECT  BFPCVTTF  2600  000-A27  000-A27
ASMA Ver. 0.2.0  ieee-cvtfrfix64.asm: Test IEEE Convert To Fixed (int-64)                           09 Jul 2016 12:54:15  Page    23

   STMT                               FILE NAME

1     C:\Users\srorso\Documents\GitHub\hyperion\tests\ieee-cvttofix64.asm


** NO ERRORS FOUND **

