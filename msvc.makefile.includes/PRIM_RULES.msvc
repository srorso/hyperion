# ***************************************************************************
#     PRIM_RULES.msvc      (!INCLUDE ed by "makefile-dllmod.msvc")
# --------------------------------------------------------------------------
# (c) Copyright Roger Bowler, 2005-2010
# --------------------------------------------------------------------------
#
#  Primary generic build rules...  ('all', 'clean', etc...)
#
# ***************************************************************************

# ---------------------------------------------------------------------
#  Primary build rules
# ---------------------------------------------------------------------

all: allzlib alllibbz2 allpcre allrexx allHercules
    if exist $(EXEDIR)\*.manifest del /f /q $(EXEDIR)\*.manifest
    echo.
    echo -- Hercules build complete --

allHercules: $(OBJDIR) $(EXEDIR) $(PDBDIR) $(MAPDIR) $(ASMDIR) $(INCDIR) \
    dynheaders  \
    $(O)build_pch.pch \
    $(MODULES) \
    $(EXECUTABLES)

# Create dynamic headers if not present nor current in $(incdir).  If
# nmake is invoked by makefile.bat, then _dynamic_version.h will exist
# the source directory.  If nmake is invoked directly, it needs to be
# created and can then be moved into the include directory.  Messy, but
# cleaner than poluting the source, and an improvement over the old
# case where a direct nmake build skipped _dynamic_version.h creation.
dynheaders:
    if not exist _dynamic_version.h _dynamic_version.cmd /c
    move /Y _dynamic_version.h $(INCDIR) >nul
    cd $(INCDIR)
    ..\GetGitHash.cmd ..
    cd ..

#clean: $(OBJDIR) $(EXEDIR) $(PDBDIR) $(MAPDIR) $(ASMDIR)
clean:
    if exist $(OBJDIR)\*.* rmdir /s /q $(OBJDIR)
    if exist $(EXEDIR)     rmdir /s /q $(EXEDIR)
    if exist $(PDBDIR)\*.* rmdir /s /q $(PDBDIR)
    if exist $(MAPDIR)\*.* rmdir /s /q $(MAPDIR)
    if exist $(INCDIR)\*.* rmdir /s /q $(INCDIR)
!IFDEF ASSEMBLY_LISTINGS
    if exist $(ASMDIR)\*.* rmdir /s /q $(ASMDIR)
!ENDIF
!IFDEF DYNDIR
    if exist $(DYNDIR)\*.* rmdir /s /q $(DYNDIR)
!ENDIF
!IFDEF fna
    if exist $(fna) del /f /q $(fna)
!ENDIF
    echo.
    echo -- Hercules clean complete --

MT_EXE_CMD=if exist $@.manifest mt.exe -nologo -outputresource:$@;1 -manifest $@.manifest
MT_DLL_CMD=if exist $@.manifest mt.exe -nologo -outputresource:$@;2 -manifest $@.manifest

linkexe = $(link) -nologo $(ldebug) $(conlflags) $(O)build_pch.obj $** $(LIBS) -out:$@ -implib:$(O)$(@B).lib $(conlibsdll) $(MAPFILE) && $(MT_EXE_CMD)
linkdll = $(link) -nologo $(ldebug) $(dlllflags) $(O)build_pch.obj $** $(LIBS) -out:$@ -implib:$(O)$(@B).lib $(conlibsdll) $(MAPFILE) && $(MT_DLL_CMD)

{$(OBJDIR)}.obj{$(EXEDIR)}.exe:
    $(linkexe)

{$(OBJDIR)}.obj{$(EXEDIR)}.dll:
    $(linkdll)

# Dummy target entry: Since the primary target is .DLL
# and .LIB is generated in the same step.. And .LIB
# are used as input, the following generates an effective
# rule, with no side effect

{$(EXEDIR)}.dll{$(OBJDIR)}.lib:
    echo $* $@

.c{$(OBJDIR)}.obj::
    $(cc) $(cdebug) $(cflags) /I. $(use_pch_opt) $(cvarsdll) /Fo"$(OBJDIR)\\" /Fd"$(OBJDIR)\\" $<

# NOTE: to be safe, since this member contains build rules, we need to
# make sure there's always a blank line following the last build rule
# in the member so that nmake doesn't complain or otherwise treat the
# statements immediately following the original !INCLUDE statement as
# part of the build rule actions. Thus the purpose of the comments you
# are now reading as the very last few lines in every build rule member.
